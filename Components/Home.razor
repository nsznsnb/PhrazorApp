@page "/"
@attribute [Authorize]
@inject UiOperationRunner UiOperationRunner
@inject HomeDashboardService DashboardService

<PageTitle>Home</PageTitle>

<MudGrid>

    <!-- 1行目：KPI 3枚（従来どおり） -->
    <!-- 登録フレーズ数 -->
    <MudItem xs="12" sm="6" md="4" lg="4" xl="4">
        <MudPaper Elevation="2" Class="pa-4 rounded-xl" Style="height:200px;">
            <MudStack Spacing="1" Style="height:100%;">
                <MudText Typo="Typo.subtitle2" Style="opacity:.75;">登録フレーズ数</MudText>
                <MudText Typo="Typo.h3" Style="font-size:clamp(1.75rem,6vw,2.5rem);">
                    @(_vm?.RegisteredPhraseCount ?? 0)
                </MudText>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Style="margin-top:auto;">
                    <MudIcon Icon="@Icons.Material.TwoTone.TrendingUp" />
                    <MudText Typo="Typo.caption" Color="Color.Info">
                        今週新規 @ThisWeekNewPhrases 件（先週比 @WeekDeltaSign@Math.Abs(WeekDeltaPercent)%）
                    </MudText>
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudItem>

    <!-- 習得フレーズ数 -->
    <MudItem xs="12" sm="6" md="4" lg="4" xl="4">
        <MudPaper Elevation="2" Class="pa-4 rounded-xl" Style="height:200px;">
            <MudStack Spacing="1" Style="height:100%;">
                <MudText Typo="Typo.subtitle2" Style="opacity:.75;">習得フレーズ数</MudText>
                <MudText Typo="Typo.h3" Style="font-size:clamp(1.75rem,6vw,2.5rem);">
                    @(_vm?.LearnedPhraseCount ?? 0)
                </MudText>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Style="margin-top:auto;">
                    <MudIcon Icon="@Icons.Material.TwoTone.Bolt" />
                    <MudText Typo="Typo.caption" Color="Color.Success">
                        連続学習 @StudyStreakDays 日
                    </MudText>
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudItem>

    <!-- 今日の格言 -->
    <MudItem xs="12" sm="12" md="4" lg="4" xl="4">
        <MudPaper Elevation="2" Class="pa-4 rounded-xl" Style="height:200px;">
            <MudStack Spacing="1" Style="height:100%;">
                <MudText Typo="Typo.subtitle2" Style="opacity:.75;">今日のフレーズ（格言）</MudText>

                @if (_vm?.TodayProverb is not null)
                {
                    <MudText Typo="Typo.h6" MaxLines="2">“@_vm.TodayProverb.Text”</MudText>
                    <MudText Typo="Typo.body2" Style="opacity:.8;">— @_vm.TodayProverb.Author</MudText>
                    @if (!string.IsNullOrWhiteSpace(_vm.TodayProverb.Meaning))
                    {
                        <MudText Typo="Typo.caption" Style="opacity:.7; margin-top:4px;" MaxLines="2">
                            @_vm.TodayProverb.Meaning
                        </MudText>
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2" Style="opacity:.7;">格言データがありません。</MudText>
                }

                <span style="margin-top:auto;"></span>
            </MudStack>
        </MudPaper>
    </MudItem>

    <!-- 2行目：グラフ 2枚（高さを揃える） -->
    <!-- 直近1か月 新規フレーズ登録数（Line／実データのみ） -->
    <MudItem xs="12" sm="12" md="6" lg="6" xl="6">
        <!-- ▼ 左のカード：基準高さ -->
        <MudPaper Elevation="2" Class="pa-4 rounded-xl" Style="height:420px;">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-2">
                <MudText Typo="Typo.subtitle1">直近1か月 新規フレーズ登録数</MudText>
                <MudText Typo="Typo.caption" Color="Color.Default">日次/推移</MudText>
            </MudStack>

            @if (HasMonthData)
            {
                <MudChart ChartType="ChartType.Line"
                          ChartSeries="@MonthSeries"
                          XAxisLabels="@MonthLabels"
                          ChartOptions="@_chartOptions"
                          AxisChartOptions="@_axisChartOptions"
                          Width="100%" Height="350px" />
            }
            else
            {
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height:350px;">
                    <MudText Typo="Typo.body2" Style="opacity:.7;">直近1か月の登録データがありません</MudText>
                </MudStack>
            }
        </MudPaper>
    </MudItem>

    <!-- 成績構成比（Donut） -->
    <MudItem xs="12" sm="12" md="6" lg="6" xl="6">
        <!-- ▼ 右のカードも同じ高さ -->
        <MudPaper Elevation="2" Class="pa-4 rounded-xl" Style="height:420px;">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-2">
                <MudText Typo="Typo.subtitle1">成績の割合（全テスト）</MudText>
                <MudText Typo="Typo.caption" Color="Color.Secondary">
                    総テスト数 @TotalTests
                </MudText>
            </MudStack>

            @if (HasGradeData)
            {
                <!-- ▼ チップ分の高さを確保するため Donut は少し低め -->
                <MudChart ChartType="ChartType.Donut"
                          InputData="@DonutData"
                          InputLabels="@DonutLabels"
                          ChartOptions="@_donutOptions"
                          Width="100%" Height="300px" />

                <!-- ▼ チップの色も画像に合わせる（S=Gold, A=Green, B=Blue, D=Gray） -->
                <MudStack Row="true" Wrap="Wrap.Wrap" Spacing="1"
                          Class="mt-2" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                    <MudChip T="string" Size="Size.Small" Variant="Variant.Filled" Label="true"
                             Style="background:#FFC107;color:#000;">S @SCount（@SPct）</MudChip>
                    <MudChip T="string" Size="Size.Small" Variant="Variant.Filled" Label="true"
                             Style="background:#2E7D32;color:#fff;">A @ACount（@APct）</MudChip>
                    <MudChip T="string" Size="Size.Small" Variant="Variant.Filled" Label="true"
                             Style="background:#1565C0;color:#fff;">B @BCount（@BPct）</MudChip>
                    <MudChip T="string" Size="Size.Small" Variant="Variant.Filled" Label="true"
                             Style="background:#757575;color:#fff;">D @DCount（@DPct）</MudChip>
                </MudStack>
            }
            else
            {
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height:350px;">
                    <MudText Typo="Typo.body2" Style="opacity:.7;">テストデータがありません</MudText>
                </MudStack>
            }
        </MudPaper>
    </MudItem>

</MudGrid>

@code {
    private HomeDashboardModel? _vm;

    // MudBlazor 8.0 の API
    private readonly AxisChartOptions _axisChartOptions = new() { MatchBoundsToSize = false };
    private readonly ChartOptions _chartOptions = new() { ShowLegend = false };

    // ドーナツ用パレット（SVGに合わせて単色化：Gold / Green / Blue / Gray）
    private static readonly string[] _donutPalette = new[]
    {
        "#FFC107", // S: gold（SVGの #FFE082～#FFC107～#C9A227 より中間色）
        "#2E7D32", // A: green（SVGの #A5D6A7～#2E7D32）
        "#1565C0", // B: blue  （SVGの #90CAF9～#1565C0）
        "#757575", // D: gray  （SVGの #BDBDBD～#757575）
    };


    private readonly ChartOptions _donutOptions = new()
    {
        ShowLegend = true,
        ChartPalette = _donutPalette
    };

    protected override async Task OnInitializedAsync()
    {
        _vm = await UiOperationRunner.ReadWithOverlayAsync(
            () => DashboardService.GetAsync(),
            message: AppMessages.MSG_I_PROGRESS_READ
        ) ?? new HomeDashboardModel();
    }

    // === 直近1か月 新規登録（日次） ===
    private bool HasMonthData => _vm?.LastMonthNewPhrases?.Any(p => p.Value > 0) == true;

    private List<ChartSeries> MonthSeries => new()
    {
        new ChartSeries
        {
            Name = string.Empty,
            Data = _vm!.LastMonthNewPhrases.Select(p => (double)p.Value).ToArray()
        }
    };

    private string[] MonthLabels =>
        _vm!.LastMonthNewPhrases
           .Select((p, i) => (i % 3 == 0) ? p.Label : string.Empty)
           .ToArray();

    // === 成績の割合（Donut） ===
    private bool HasGradeData => (_vm?.GradeDistribution?.Sum(x => x.Value) ?? 0) > 0;

    private double[] DonutData =>
        _vm?.GradeDistribution?.Select(x => x.Value).ToArray() ?? Array.Empty<double>();

    private string[] DonutLabels =>
        _vm?.GradeDistribution?.Select(x => x.Label).ToArray()
        ?? new[] { "S", "A", "B", "D" };

    private int TotalTests => (int)(_vm?.GradeDistribution?.Sum(x => x.Value) ?? 0);

    private int SCount => (int)(_vm?.GradeDistribution?.FirstOrDefault(x => x.Label == "S")?.Value ?? 0);
    private int ACount => (int)(_vm?.GradeDistribution?.FirstOrDefault(x => x.Label == "A")?.Value ?? 0);
    private int BCount => (int)(_vm?.GradeDistribution?.FirstOrDefault(x => x.Label == "B")?.Value ?? 0);
    private int DCount => (int)(_vm?.GradeDistribution?.FirstOrDefault(x => x.Label == "D")?.Value ?? 0);

    private string SPct => FormatPct(SCount);
    private string APct => FormatPct(ACount);
    private string BPct => FormatPct(BCount);
    private string DPct => FormatPct(DCount);
    private string FormatPct(int count)
        => TotalTests <= 0 ? "0%" : $"{(count * 100.0 / TotalTests):0.#}%";

    // KPI 用（既存ロジック）
    private int ThisWeekNewPhrases =>
        (int)(_vm?.WeeklyNewPhrases?.LastOrDefault()?.Value ?? 0);
    private int PrevWeekNewPhrases =>
        (int)(_vm?.WeeklyNewPhrases?.SkipLast(1).LastOrDefault()?.Value ?? 0);
    private int WeekDelta => ThisWeekNewPhrases - PrevWeekNewPhrases;
    private int WeekDeltaPercent =>
        PrevWeekNewPhrases <= 0
            ? (ThisWeekNewPhrases > 0 ? 100 : 0)
            : (int)Math.Round((double)WeekDelta / PrevWeekNewPhrases * 100);
    private string WeekDeltaSign => WeekDelta >= 0 ? "+" : "-";

    // 連続学習日数はサービス側の日別レビュー集計を利用
    private int StudyStreakDays => CalcStreak(_vm?.DailyReviews?.Select(x => (double)x.Value) ?? Enumerable.Empty<double>());
    private static int CalcStreak(IEnumerable<double> counts)
        => counts.Reverse().TakeWhile(c => c > 0d).Count();
}
