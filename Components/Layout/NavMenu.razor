@implements IDisposable

@inject NavigationManager NavigationManager

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.TwoTone.Home" IconColor="Color.Secondary">Home</MudNavLink>
    <MudNavLink Href="counter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.TwoTone.Add" IconColor="Color.Secondary">Counter</MudNavLink>  
    <MudNavLink Href="weather" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.TwoTone.List" IconColor="Color.Secondary">Weather</MudNavLink>
    <MudNavLink Href="phrases" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.TwoTone.List" IconColor="Color.Secondary">フレーズ一覧</MudNavLink>
    <MudNavLink Href="genres" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.TwoTone.List" IconColor="Color.Secondary">フレーズジャンル一覧</MudNavLink>
    <MudNavLink Href="imagegen" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.TwoTone.List" IconColor="Color.Secondary">画像生成設定</MudNavLink>


    <AuthorizeView>
        <Authorized>
            <form action="Account/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" class="mud-nav-link mud-ripple">
                    <MudIcon Icon="@Icons.Material.TwoTone.Logout" Color="Color.Secondary" Class="mr-3" ></MudIcon> ログアウト
                </button>
            </form>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.TwoTone.Person" IconColor="Color.Secondary">アカウント作成</MudNavLink>
            <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.TwoTone.Password" IconColor="Color.Secondary">ログイン</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>


@code {

    bool _expanded = true;
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

