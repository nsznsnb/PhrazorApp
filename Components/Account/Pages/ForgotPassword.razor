@page "/Account/ForgotPassword"
@layout AccountEmptyLayout


@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="5" Class="pa-16">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <AppLogo />
            </MudItem>
            <MudItem>
                <StatusMessage Message="@errorMessage" />
                <EditForm id="@AppConstants.ID_FORM" Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <MudStack Spacing="0" AlignItems="AlignItems.Center">
                        <MudStack Row="true" Spacing="2" Justify="Justify.Center" AlignItems="AlignItems.Center" Style="transform: translateX(-10px);">
                            <MudIcon Icon="@Icons.Material.TwoTone.Password" Color="Color.Secondary" />
                            <MudText Typo="Typo.h5">パスワード再設定</MudText>
                        </MudStack>
                        <MudText Typo="Typo.caption" >パスワード再設定用のメールを送信します。</MudText>
                    </MudStack>


                    <MudStaticTextField @bind-Value="Input.Email" For="@(() => Input.Email)"
                                        Label="Email" Placeholder="name@example.com"
                                        Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Email"
                                        Margin="Margin.Dense" Variant="Variant.Outlined" Class="mt-4" Style="min-width: 350px;"
                                        UserAttributes="@(new() { { "autocomplete", "email" }, { "aria-required", "true" } })" ShrinkLabel />


                    <MudStaticButton id="@AppConstants.ID_BUTTON_SUBMIT" Class="my-4" FormAction="FormAction.Submit" Color="Color.Primary" Variant="Variant.Filled" Size="@AppConstants.SIZE_BUTTON" FullWidth="true">送信</MudStaticButton>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                        <MudLink Href="/Account/Login" Typo="Typo.body2" Color="Color.Primary"><b>ログイン画面に戻る</b></MudLink>
                    </MudStack>

                </EditForm>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>


@code {

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? errorMessage;

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        try
        {
            await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = string.Format(AppMessages.MSG_E_FAILURE_DETAIL, "メール送信");
        }


        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = AppMessages.MSG_E_REQUIRED_DETAIL)]
        [EmailAddress(ErrorMessage = AppMessages.MSG_E_INVALID_FORMAT)]
        [RegularExpression(AppConstants.REGEX_HANKAKU_LESS_THAN50, ErrorMessage = AppMessages.MSG_E_HANKAKU_LESS_THAN50)]
        [Display(Name = "メールアドレス")]
        public string Email { get; set; } = "";
    }
}
