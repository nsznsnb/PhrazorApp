@page "/Account/ConfirmEmail"
@layout AccountEmptyLayout

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using PhrazorApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>アカウント登録完了</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="5" Class="pa-16">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <AppLogo />
            </MudItem>
            <MudItem>
                <StatusMessage Message="@errorMessage" />
                @if (string.IsNullOrEmpty(errorMessage))
                {
                    <MudStack Row="true" Spacing="2" Justify="Justify.Center" AlignItems="AlignItems.Center" Style="transform: translateX(-10px);">
                        <MudIcon Icon="@Icons.Material.TwoTone.Email" Color="Color.Secondary" />
                        <MudText Typo="Typo.h5">アカウント登録完了</MudText>
                    </MudStack>
                    <MudText Typo="Typo.body1" Class="mt-4" GutterBottom="true">アカウント登録が完了しました。</MudText>
                    <MudText Typo="Typo.body1" Class="mt-0" GutterBottom="true">ログインを行い、サービスをご利用ください。</MudText>

                }

                <MudDivider Class="mt-4" />

                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2" Class="mt-4">
                    <MudLink Href="/Account/Login" Typo="Typo.body2" Color="Color.Primary"><b>ログイン画面へ</b></MudLink>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            errorMessage = string.Format(ComMessage.MSG_E_NOT_FOUND, $"ID:{UserId} に紐づくユーザー");
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            if (!result!.Succeeded)
            {
                errorMessage = string.Format(ComMessage.MSG_E_ERROR_DETEIL, "本登録中");
            }
        }
    }
}
