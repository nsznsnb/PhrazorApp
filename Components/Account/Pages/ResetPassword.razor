@page "/Account/ResetPassword"
@layout AccountEmptyLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using PhrazorApp.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>パスワードリセット</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="5" Class="pa-16">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <AppLogo />
            </MudItem>
            <MudItem>
                <StatusMessage IdentityErrors="@identityErrors" />
                <EditForm id="@ComDefine.ID_FORM" Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <MudStack Spacing="0" AlignItems="AlignItems.Center" Class="mb-4">
                        <MudStack Row="true" Spacing="2" Justify="Justify.Center" AlignItems="AlignItems.Center" Style="transform: translateX(-10px);">
                            <MudIcon Icon="@Icons.Material.TwoTone.Password" Color="Color.Secondary" />
                            <MudText Typo="Typo.h5">パスワードリセット</MudText>
                        </MudStack>
                    </MudStack>
                    <MudStaticTextField @bind-Value="@Input.Email" For="() => Input.Email" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Email"
                                        Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="メールアドレス" ShrinkLabel　Placeholder="name@example.com"
                                        UserAttributes="@(new() { { "autocomplete", "email" }, { "aria-required", "true" } })" Style="min-width: 350px;" />
                    <MudStaticTextField @bind-Value="@Input.Password" For="() => Input.Password" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="パスワード"
                                        Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Visibility" AdornmentToggledIcon="@Icons.Material.TwoTone.VisibilityOff"
                                        AdornmentClickFunction="showPassword" InputType="InputType.Password" ShrinkLabel　
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })" />

                    <MudStaticTextField @bind-Value="@Input.ConfirmPassword" For="() => Input.ConfirmPassword" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="確認用パスワード"
                                        Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Visibility" AdornmentToggledIcon="@Icons.Material.TwoTone.VisibilityOff"
                                        AdornmentClickFunction="showPassword" InputType="InputType.Password" ShrinkLabel
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })" />



                    <MudStaticButton id="@ComDefine.ID_BUTTON_SUBMIT" Class="my-2" FormAction="FormAction.Submit" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">リセット</MudStaticButton>
                </EditForm>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [EmailAddress]
        [RegularExpression(ComDefine.REGEX_HANKAKU_LESS_THAN50, ErrorMessage = ComMessage.MSG_E_HANKAKU_LESS_THAN50)]
        [Display(Name = "メールアドレス")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [StringLength(100, ErrorMessage = ComMessage.MSG_E_RANGE_BETWEEN, MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "パスワード")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [DataType(DataType.Password)]
        [Display(Name = "確認用パスワード")]
        [Compare(nameof(Password), ErrorMessage = ComMessage.MSG_E_MISMATCH_PASSWORD)]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
