@page "/Account/Register"
@layout AccountEmptyLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>アカウント作成</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="5" Class="pa-16">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <AppLogo />
            </MudItem>
            <MudItem>
                <EditForm id="myForm" Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                    <DataAnnotationsValidator />

                    <MudStack Spacing="0" AlignItems="AlignItems.Center" Class="mb-4">
                        <MudStack Row="true" Spacing="2" Justify="Justify.Center" AlignItems="AlignItems.Center" Style="transform: translateX(-10px);">
                            <MudIcon Icon="@Icons.Material.TwoTone.Lock" Color="Color.Secondary" />
                            <MudText Typo="Typo.h5">アカウント作成</MudText>
                        </MudStack>
                    </MudStack>
                    <StatusMessage Message="@Message" IdentityErrors="identityErrors" />



                    <MudStaticTextField @bind-Value="@Input.UserName" For="() => Input.UserName" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Person"
                                        Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="ユーザーID" ShrinkLabel
                                        UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })" />

                    <MudStaticTextField @bind-Value="@Input.Email" For="() => Input.Email" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Email"
                                        Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="メールアドレス" ShrinkLabel　Placeholder="name@example.com"
                                        UserAttributes="@(new() { { "autocomplete", "email" }, { "aria-required", "true" } })" />
                    <MudGrid Spacing="1">
                        <MudItem xs="12" sm="6">
                            <MudStaticTextField @bind-Value="@Input.LastName" For="() => Input.LastName"
                                                Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="姓" ShrinkLabel　Placeholder="例)山田"
                                                UserAttributes="@(new() { { "autocomplete", "name" } })" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudStaticTextField @bind-Value="@Input.FirstName" For="() => Input.FirstName"
                                                Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="名" ShrinkLabel　Placeholder="例)太郎"
                                                UserAttributes="@(new() { { "autocomplete", "name" } })" />
                        </MudItem>
                    </MudGrid>



                    <MudStaticTextField @bind-Value="@Input.Password" For="() => Input.Password" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="パスワード"
                                        Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Visibility" AdornmentToggledIcon="@Icons.Material.TwoTone.VisibilityOff"
                                        AdornmentClickFunction="showPassword" InputType="InputType.Password" ShrinkLabel　
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })" />

                    <MudStaticTextField @bind-Value="@Input.ConfirmPassword" For="() => Input.ConfirmPassword" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="確認用パスワード"
                                        Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Visibility" AdornmentToggledIcon="@Icons.Material.TwoTone.VisibilityOff"
                                        AdornmentClickFunction="showPassword" InputType="InputType.Password" ShrinkLabel
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })" />



                    <MudStaticButton id="btnSubmit" Class="my-4" FormAction="FormAction.Submit" Color="Color.Primary" Variant="Variant.Filled" Size="@ComDefine.SIZE_BUTTON" FullWidth="true">登録</MudStaticButton>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                        <MudLink Href="/Account/Login" Typo="Typo.body2" Color="Color.Primary"><b>ログイン画面に戻る</b></MudLink>
                    </MudStack>

                </EditForm>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>




@code {

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";


    public async Task RegisterUser(EditContext editContext)
    {

        var user = CreateUser();


        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        await UserStore.SetUserNameAsync(user, Input.UserName, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }


        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }



    private static ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [RegularExpression(ComDefine.REGEX_HANKAKU_LESS_THAN20, ErrorMessage = ComMessage.MSG_E_HANKAKU_LESS_THAN20)]
        [Display(Name = "ユーザーID")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [EmailAddress]
        [RegularExpression(ComDefine.REGEX_HANKAKU_LESS_THAN50, ErrorMessage = ComMessage.MSG_E_HANKAKU_LESS_THAN50)]
        [Display(Name = "メールアドレス")]
        public string Email { get; set; } = "";

        [StringLength(10, ErrorMessage = ComMessage.MSG_E_RANGE_LESS_THAN)]
        [Display(Name = "名")]
        public string? FirstName { get; set; }
        [StringLength(10, ErrorMessage = ComMessage.MSG_E_RANGE_LESS_THAN)]
        [Display(Name = "姓")]
        public string? LastName { get; set; }

        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [StringLength(100, ErrorMessage = ComMessage.MSG_E_RANGE_BETWEEN, MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "パスワード")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [DataType(DataType.Password)]
        [Display(Name = "確認用パスワード")]
        [Compare(nameof(Password), ErrorMessage = ComMessage.MSG_E_MISMATCH_PASSWORD)]
        public string ConfirmPassword { get; set; } = "";
    }
}
