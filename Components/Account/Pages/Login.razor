@page "/Account/Login"
@layout EmptyLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using PhrazorApp.Common
@using PhrazorApp.Components.Layout
@using PhrazorApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>英作文練習アプリ</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="5" Class="pa-16">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <MudStack Row="true" Spacing="2" Justify="Justify.Center" AlignItems="AlignItems.Center" Style="transform: translateX(-10px);">
                    <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Primary" />
                    <MudText Typo="Typo.h6" Color="Color.Primary" Style="font-weight:700;">@ComDefine.APP_NAME</MudText>
                </MudStack>
            </MudItem>
            <MudItem>
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <MudStack Spacing="0" AlignItems="AlignItems.Center" Class="mb-4">
                        <MudStack Row="true" Spacing="2" Justify="Justify.Center" AlignItems="AlignItems.Center" Style="transform: translateX(-10px);">
                            <MudIcon Icon="@Icons.Material.Filled.Lock" Color="Color.Dark" />
                            <MudText Typo="Typo.h5">ログイン</MudText>
                        </MudStack>
                        <MudText Typo="Typo.caption">@ComDefine.APP_NAME を使用するにはアカウントにログインしてください。</MudText>
                    </MudStack>

                    <MudStaticTextField @bind-Value="@Input.UserId" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Person" autocomplete="username"
                    Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="ユーザーID" For="() => Input.UserId" ShrinkLabel />

                    <MudStaticTextField @bind-Value="@Input.Password" autocomplete="current-password" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="パスワード"
                    Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Visibility" AdornmentToggledIcon="@Icons.Material.Outlined.VisibilityOff"
                    AdornmentClickFunction="showPassword" InputType="InputType.Password" For="() => Input.Password" ShrinkLabel />

                    <MudLink Href="Account/ForgotPassword" Typo="Typo.body2" Color="Color.Primary"><b>パスワードをお忘れですか？</b></MudLink>


                    <MudStaticButton Class="my-4" FormAction="FormAction.Submit" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">続ける</MudStaticButton>

                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                        <MudText Typo="Typo.body2">アカウントが未登録ですか？</MudText>
                        <MudLink Href="/Account/Register" Typo="Typo.body2" Color="Color.Primary"><b>アカウントの作成</b></MudLink>
                    </MudStack>

                </EditForm>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserId, Input.Password, true, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = string.Format(ComMessage.MSG_E_MISMATCH_DETAIL, "ユーザーIDまたはパスワード"); 
        }
    }

    /// <summary>
    /// ログインページモデル
    /// </summary>
    private sealed class InputModel
    {
        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [Display(Name = "ユーザーID")]
        public string UserId { get; set; } = "";

        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [DataType(DataType.Password)]
        [Display(Name = "パスワード")]
        public string Password { get; set; } = "";

    }
}

<script>
    let timeoutId;

    
    function showPassword(inputElement, button) {
        if (inputElement.type === 'password') {
            inputElement.type = 'text';
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () {
                inputElement.type = 'password';
            }, 5000);
        } else {
            inputElement.type = 'password';
            clearTimeout(timeoutId);
        }
    }
</script>
