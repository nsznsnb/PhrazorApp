@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using PhrazorApp.Constants
@using PhrazorApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>パスワード変更</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">パスワード変更</MudText>

<StatusMessage Message="@message" IdentityErrors="identityErrors" />

<EditForm id="@ComDefine.ID_FORM" Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />

    <MudGrid Spacing="2" Class="mt-2">
        <MudItem xs="12">
            <MudStaticTextField @bind-Value="@Input.OldPassword" For="() => Input.OldPassword" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="現在のパスワード"
                                Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Visibility" AdornmentToggledIcon="@Icons.Material.TwoTone.VisibilityOff"
                                AdornmentClickFunction="showPassword" InputType="InputType.Password" ShrinkLabel　
                                HelperText="@string.Format(ComMessage.MSG_I_HELPER_REQUIRED_DETAIL, "現在のパスワード")"
                                UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })" />
        </MudItem>
        <MudItem xs="12">
            <MudStaticTextField @bind-Value="@Input.NewPassword" For="() => Input.NewPassword" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="新しいパスワード"
                                Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Visibility" AdornmentToggledIcon="@Icons.Material.TwoTone.VisibilityOff"
                                AdornmentClickFunction="showPassword" InputType="InputType.Password" ShrinkLabel　
                                HelperText="@string.Format(ComMessage.MSG_I_HELPER_REQUIRED_DETAIL, "新しいパスワード")"
                                UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })" />
        </MudItem>
        <MudItem xs="12">
            <MudStaticTextField @bind-Value="@Input.ConfirmPassword" For="() => Input.ConfirmPassword" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="確認用パスワード"
                                Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Visibility" AdornmentToggledIcon="@Icons.Material.TwoTone.VisibilityOff"
                                AdornmentClickFunction="showPassword" InputType="InputType.Password" ShrinkLabel
                                HelperText="@string.Format(ComMessage.MSG_I_HELPER_REQUIRED_DETAIL, "確認用パスワード")"
                                UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })" />
        </MudItem>

        <MudItem xs="12">
            <MudStaticButton id="@ComDefine.ID_BUTTON_SUBMIT" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">変更</MudStaticButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    private IEnumerable<IdentityError>? identityErrors;
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {

            identityErrors = changePasswordResult.Errors;
            return;
        }

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToCurrentPageWithStatus(ComDefine.PREFIX_ACCOUNT_INFO_MESSAGE + "パスワードを変更しました。", HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [DataType(DataType.Password)]
        [Display(Name = "現在のパスワード")]
        public string OldPassword { get; set; } = "";


        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [StringLength(100, ErrorMessage = ComMessage.MSG_E_RANGE_BETWEEN, MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "新しいパスワード")]
        public string NewPassword { get; set; } = "";

        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [DataType(DataType.Password)]
        [Display(Name = "確認用パスワード")]
        [Compare(nameof(NewPassword), ErrorMessage = ComMessage.MSG_E_MISMATCH_PASSWORD)]
        public string ConfirmPassword { get; set; } = "";
    }
}
