@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using PhrazorApp.Constants
@using PhrazorApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>メールアドレス変更</PageTitle>

<MudText Typo="Typo.h6" GutterBottom="true">メールアドレス変更</MudText>

<StatusMessage Message="@message" />

@if (message != null && message.StartsWith(ComDefine.PREFIX_ACCOUNT_INFO_MESSAGE))
{
    // 完了メッセージ表示時はフォームを表示しない
}
else
{

    <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
        <AntiforgeryToken />
    </form>
    <EditForm id="@ComDefine.ID_FORM" Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />

        <MudGrid Spacing="2" Class="mt-2">

            @if (isEmailConfirmed)
            {
                <MudItem xs="12">
                    <MudStaticTextField @bind-Value="@email" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="現在のメールアドレス"
                                        ShrinkLabel Disabled="true" AdornmentIcon="Icons.Material.TwoTone.Check" AdornmentColor="Color.Success" />
                </MudItem>
            }
            else
            {
                <MudItem xs="12">
                    <MudStaticTextField @bind-Value="@email" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="仮登録のメールアドレス"
                                        ShrinkLabel Disabled="true" AdornmentIcon="Icons.Material.TwoTone.Check" AdornmentColor="Color.Success" />
                </MudItem>
                <MudItem xs="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">本登録用メール送信</MudStaticButton>
                </MudItem>
            }

            <MudItem xs="12">
                <MudStaticTextField @bind-Value="@Input.NewEmail" For="@(() => Input.NewEmail)" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="新しいメールアドレス"
                                    ShrinkLabel
                                    HelperText="@string.Format(ComMessage.MSG_I_HELPER_REQUIRED_DETAIL, "新しいメールアドレス")"
                                    UserAttributes="@(new() { { "autocomplete", "email" }, { "aria-required", "true" } })" />
            </MudItem>

            <MudItem xs="12">
                <MudStaticButton id="@ComDefine.ID_BUTTON_SUBMIT" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">@ComDefine.LABEL_BUTTON_CHANGE</MudStaticButton>
            </MudItem>
        </MudGrid>
    </EditForm>
}



@code {

    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {

        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "アドレスが変わっていません。";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code, ["type"] = ConfirmationLinkType.Email.ToString() });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = ComDefine.PREFIX_ACCOUNT_INFO_MESSAGE + "新しいメールアドレス宛に変更用のメールを送信しました。<br />メール本文のリンクをクリックして変更を完了してください。";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = ComDefine.PREFIX_ACCOUNT_INFO_MESSAGE + "本登録用のメールを送信しました。メールをご確認ください。";
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = ComMessage.MSG_E_REQUIRED_DETAIL)]
        [EmailAddress]
        [RegularExpression(ComDefine.REGEX_HANKAKU_LESS_THAN50, ErrorMessage = ComMessage.MSG_E_HANKAKU_LESS_THAN50)]
        [Display(Name = "新しいメールアドレス")]
        public string? NewEmail { get; set; }
    }
}
