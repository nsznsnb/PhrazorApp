@page "/genres"
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject GenreService GenreService
@inject UiOperationRunner UiOperationRunner

<MudStack Spacing="2">
    <SectionTitle HeadingLevel="2" Title="フレーズジャンル一覧" />
    <ActionCard>
        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Info" StartIcon="@Icons.Material.TwoTone.Add" OnClick="@(() => NavigationManager.NavigateTo("/genres/create"))">新規追加</MudButton>
    </ActionCard>
    <BaseCard>
        <MudCardContent>
            <MudTable Items="@Elements" Hover="true" Height="500px" FixedHeader="true" Dense="true" Elevation="AppConstants.DEFAULT_ELEVATION" Class="px-4">
                <HeaderContent>
                    <MudTh>ジャンル</MudTh>
                    <MudTh style="min-width: 200px;">操作</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.subtitle1" Style="font-weight: 600;">@context.Name</MudText>
                            <MudStack Row Wrap="Wrap.Wrap" Spacing="0">
                                @foreach (var sub in context.SubGenres)
                                {
                                    <MudChip Color="Color.Default"
                                             T="string"
                                             Variant="Variant.Text"
                                             Size="Size.Small">
                                        @sub.Name
                                    </MudChip>
                                }
                            </MudStack>
                        </MudStack>

                    </MudTd>
                    <MudTd Align="Right" style="min-width: 200px;">
                        <MudStack Row="true">
                            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Info" StartIcon="@Icons.Material.TwoTone.Edit" OnClick="@(() => NavigationManager.NavigateTo($"/genres/edit/{context.Id}"))">@AppConstants.LABEL_BUTTON_EDIT</MudButton>
                            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error" StartIcon="@Icons.Material.TwoTone.Delete" OnClick="@(() => OnDeleteButtonClickedAsync(context))">@AppConstants.LABEL_BUTTON_DELETE</MudButton>
                        </MudStack>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </BaseCard>
    
</MudStack>


@code {
    private GenreModel model = new();
    private List<GenreModel> Elements = new();

    protected override async Task OnInitializedAsync()
    {
        // 初期一覧取得（<>不要・Snackbarは空メッセージで出ない）
        var list = await UiOperationRunner.RunLoadOnlyAsync(
            ct => GenreService.GetGenreViewModelListAsync(ct),
            runningMessage: "読込中...",
            showCancel: false
        );
        if (list is not null)
            Elements = list;
    }

    private async Task OnDeleteButtonClickedAsync(GenreModel item)
    {
        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.DeleteConfirm,
            string.Format(AppMessages.MSG_I_CONFIRM_DELETE, item.Name));
        if (!ok) return;

        // 削除 → 成功したら一覧再読込（<>不要）
        var list = await UiOperationRunner.RunThenLoadAsync(
            doOperation: ct => GenreService.DeleteGenreAsync(item.Id, ct),     // 非ジェネリック
            loadData: ct => GenreService.GetGenreViewModelListAsync(ct),     // ジェネリック（型はここから推論）
            runningMessage: "削除中...",
            showCancel: true
        );

        if (list is not null)
            Elements = list;
    }
}