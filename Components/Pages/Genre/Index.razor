@page "/genres"
@attribute [Authorize]

@using PhrazorApp.Models
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject GenreService GenreService
@inject UiOperationRunner UiOperationRunner

<MudStack Spacing="2">
    <SectionTitle HeadingLevel="2" Title="フレーズジャンル一覧" />
    <ActionCard>
        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Info" StartIcon="@Icons.Material.TwoTone.Add" OnClick="@(() => NavigationManager.NavigateTo("/genres/create"))">新規追加</MudButton>
    </ActionCard>
    <BaseCard>
        <TableWithToolbar TItem="GenreModel"
                          Title="フレーズジャンル一覧"
                          Items="@Elements"
                          Search="true"
                          SearchBy="@(g => new[] { g.Name ?? string.Empty }.Concat(g.SubGenres?.Select(s => s.Name ?? "") ?? Array.Empty<string>()))"
                          Pager="TablePagerMode.Auto"
                          RowsPerPage="10"
                          Height="500px">

            <ToolbarContent Context="ctx">
                <MudButton Variant="Variant.Outlined"
                           Size="@AppConstants.SIZE_BUTTON"
                           Color="Color.Info"
                           StartIcon="@Icons.Material.TwoTone.Add"
                           FullWidth="@(!ctx.IsMdUp)"
                           OnClick="@(() => NavigationManager.NavigateTo("/genres/create"))">
                    新規追加
                </MudButton>
            </ToolbarContent>

            <HeaderContent>
                <MudTh>ジャンル</MudTh>
                <MudTh style="min-width:200px;">操作</MudTh>
            </HeaderContent>

            <RowTemplate Context="context">
                <MudTd>
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.subtitle1" Style="font-weight:600;">@context.Name</MudText>
                        <MudStack Row Wrap="Wrap.Wrap" Spacing="0">
                            @foreach (var sub in context.SubGenres)
                            {
                                <MudChip T="string" Color="Color.Default" Variant="Variant.Text" Size="Size.Small">
                                    @sub.Name
                                </MudChip>
                            }
                        </MudStack>
                    </MudStack>
                </MudTd>
                <MudTd Align="Right" style="min-width:200px;">
                    <MudStack Row="true" Spacing="1">
                        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Info"
                                   StartIcon="@Icons.Material.TwoTone.Edit"
                                   OnClick="@(() => NavigationManager.NavigateTo($"/genres/edit/{context.Id}"))">
                            @AppConstants.LABEL_BUTTON_EDIT
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error"
                                   StartIcon="@Icons.Material.TwoTone.Delete"
                                   OnClick="@(() => OnDeleteButtonClickedAsync(context))">
                            @AppConstants.LABEL_BUTTON_DELETE
                        </MudButton>
                    </MudStack>
                </MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText Class="p-4">データがありません。</MudText>
            </NoRecordsContent>
        </TableWithToolbar>
    </BaseCard>
</MudStack>

@code {
    private List<GenreModel> Elements = new();
    private int tablePage = 0;

    protected override async Task OnInitializedAsync()
    {
        var list = await UiOperationRunner.RunLoadOnlyAsync(
            ct => GenreService.GetGenreViewModelListAsync(ct),
            runningMessage: "読込中...",
            showCancel: false
        );
        if (list is not null)
            Elements = list;
    }

    private bool FilterByText(GenreModel item, string text)
    {
        if (string.IsNullOrWhiteSpace(text)) return true;
        return (item.Name?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false)
            || (item.SubGenres?.Any(s => s.Name?.Contains(text, StringComparison.OrdinalIgnoreCase) ?? false) ?? false);
    }

    private async Task OnDeleteButtonClickedAsync(GenreModel item)
    {
        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.DeleteConfirm,
            string.Format(AppMessages.MSG_I_CONFIRM_DELETE, item.Name));
        if (!ok) return;

        var list = await UiOperationRunner.RunThenLoadAsync(
            doOperation: ct => GenreService.DeleteGenreAsync(item.Id, ct),
            loadData: ct => GenreService.GetGenreViewModelListAsync(ct),
            runningMessage: "削除中...",
            showCancel: true
        );

        if (list is not null)
        {
            Elements = list;
            // 件数が減った時のために先頭ページへ
            if (tablePage != 0) tablePage = 0;
        }
    }
}
