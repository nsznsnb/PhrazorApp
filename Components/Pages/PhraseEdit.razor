@page "/phrases/create"
@page "/phrases/edit/{Id:guid}"
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ICategoryService CategoryService
@inject LoadingService OverlayService


<MudContainer>
    <MudForm Model="@model" @ref="@form" ValidationDelay="0">

        <MudStack Spacing="2">
            <SectionTitle  Title="@(isEdit ? "フレーズ編集" : "フレーズ新規作成")" />

            <MudCard Elevation="ComDefine.DEFAULT_ELEVATION_CARD">
                <MudCardContent Class="py-2">
                    <MudStack Row="true" Spacing="1">
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" StartIcon="@Icons.Material.TwoTone.Save">@ComDefine.LABEL_BUTTON_REGISTER</MudButton>
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.TwoTone.Block" OnClick="ClearAsync">@ComDefine.LABEL_BUTTON_CLEAR</MudButton>
                        <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.TwoTone.NavigateBefore" 　OnClick="@(() => NavigationManager.NavigateTo("/phrases"))">@ComDefine.LABEL_BUTTON_RETURN_INDEX</MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>
            <MudCard Elevation="ComDefine.DEFAULT_ELEVATION_CARD">


                <MudCardContent Class="py-2">
                    <MudGrid Spacing="1">
                        <MudItem xs="12" md="12">
                            <MudTextField T="string" Label="フレーズ" Variant="Variant.Outlined" Lines="3" Immediate="true" ShrinkLabel MaxLength="200"
                                          @bind-Value="@model.Phrase"
                                          HelperText="@string.Format(ComMessage.MSG_I_HELPER_REQUIRED_LESS_THAN, "英文", "200")" />
                        </MudItem>
                        <MudItem xs="12" md="12">
                            <MudTextField T="string" Label="意味" Variant="Variant.Outlined" Text="@model.Meaning" Lines="3" MaxLength="200" Immediate="true" ShrinkLabel
                                          @bind-Value="@model.Meaning"
                                          HelperText="@string.Format(ComMessage.MSG_I_HELPER_REQUIRED_LESS_THAN, "英文の意味", "200")"/>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <ImageGenerator Prompt="@model.Phrase" @bind-ImageUrl="@model.ImageUrl" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <ItemDropSelector Items="@_categoryItems" MaxSelection="3" UnassignedLabel="カテゴリ">
                                <ItemTemplate Context="item">
                                    <MudPaper Elevation="1" Class="pa-0 ma-1">
                                        <MudChip T="string"
                                                 Color="@(item.Group == "Large" ? Color.Info : Color.Secondary)"
                                                 Size="Size.Small"
                                                 Text="@(item.Group == "Large" ? "大" : "小")">
                                            @item.Name
                                        </MudChip>
                                    </MudPaper>
                                </ItemTemplate>
                            </ItemDropSelector>
                        </MudItem>
                        <MudFlexBreak />
                        <MudItem xs="12" md="12">
                            <MudTextField T="string" Label="Note" Variant="Variant.Outlined" Text="@model.Meaning" Lines="3" MaxLength="200" Immediate="true" ShrinkLabel
                                          @bind-Value="@model.Meaning"
                                          HelperText="@string.Format(ComMessage.MSG_I_HELPER_ARBITRARY_LESS_TAHN, "解説や備考", "200")" />
                        </MudItem>

                    </MudGrid>
                </MudCardContent>

            </MudCard>
            <MudCard Elevation="ComDefine.DEFAULT_ELEVATION_CARD">
                <MudCardContent Class="py-2">
                    <MudStack Row="true" Spacing="1">
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" StartIcon="@Icons.Material.TwoTone.Save">@ComDefine.LABEL_BUTTON_REGISTER</MudButton>
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.TwoTone.Block" OnClick="ClearAsync">@ComDefine.LABEL_BUTTON_CLEAR</MudButton>
                        <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.TwoTone.NavigateBefore" 　OnClick="@(() => NavigationManager.NavigateTo("/phrases"))">@ComDefine.LABEL_BUTTON_RETURN_INDEX</MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudStack>
    </MudForm>

</MudContainer>



@code {

    [Parameter]
    public Guid? Id { get; set; }

    MudForm form;


    /// <summary>
    /// 編集かどうか
    /// </summary>
    private bool isEdit = false;
    /// <summary>
    /// 作成対象モデル
    /// </summary>
    private PhraseModel model = new PhraseModel();

    protected override async Task OnInitializedAsync()
    {
        isEdit = Id != null ? true : false;
        await ClearAsync();

    }


    private async Task ClearAsync()
    {
        if (isEdit)
        {
            // model = await CategoryService.GetCategoryViewModelAsync(Id.Value);
            model = new() { Id = Guid.NewGuid() };

        }
        else
        {
            model = new() { Id = Guid.NewGuid() };
        }

        if (form != null)
        {
            // バリデーションエラークリア
            // form.ResetValidation();
        }

    }

    private List<DropItemModel> _categoryItems = new()
{
    new() { Id = Guid.NewGuid(), Name = "Grammar", Group = "Large", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Vocabulary", Group = "Large", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Fruits", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },
    new() { Id = Guid.NewGuid(), Name = "Animals", Group = "Small", DropTarget = "Unassigned" },


};

    private void OnCategoryDropped(MudItemDropInfo<DropItemModel> dropInfo)
    {
        dropInfo.Item.DropTarget = dropInfo.DropzoneIdentifier;
    }




    // /// <summary>
    // /// 登録処理
    // /// </summary>
    // /// <returns></returns>
    // private async Task Submit()
    // {
    //     await form.Validate();

    //     if (!form.IsValid)
    //     {
    //         return;
    //     }

    //     // 確認ダイアログ表示
    //     var dialog = await DialogService.ShowCommonDialogAsync(CommonDialogPattern.RegisterConfirm, string.Format(ComMessage.MSG_I_CONFIRM_REGIST, model.Name));
    //     var dialogResult = await dialog.Result;

    //     if (dialogResult!.Canceled)
    //     {
    //         return;
    //     }

    //     var result = isEdit ? await CategoryService.UpdateCategoryAsync(model) : await CategoryService.CreateCategoryAsync(model);
    //     Snackbar.AddServiceResult(result);

    //     if (!result.IsSuccess)
    //     {
    //         return;
    //     }

    //     NavigationManager.NavigateTo("/categories");
    // }

}
