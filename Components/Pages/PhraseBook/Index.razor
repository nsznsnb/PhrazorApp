@page "/phrasebooks"
@attribute [Authorize]

@using Microsoft.AspNetCore.Components.Web
@inject PhraseBookService PhraseBookService
@inject PhraseService PhraseService
@inject UiOperationRunner UiOperationRunner
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject PhrazorApp.UI.Interop.JsInteropManager Js

<PageTitle>フレーズ帳</PageTitle>

<SectionTitle HeadingLevel="2" Title="フレーズ帳" />

<MudGrid Spacing="2">
    <!-- 左：ブック作成＋一覧 -->
    <MudItem xs="12" md="4" lg="3">
        <BaseCard>
            <MudCardContent>
                <MudStack Spacing="1">
                    <MudTextField T="string"
                                  Value="_newBookName"
                                  ValueChanged="@((string? v) => _newBookName = v ?? string.Empty)"
                                  Placeholder="新しいブック名"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  MaxLength="60"
                                  Immediate="true"
                                  Clearable="true"
                                  OnKeyDown="OnNewBookNameKeyDown" />
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.TwoTone.Add"
                               Disabled="@string.IsNullOrWhiteSpace(_newBookName)"
                               OnClick="CreateBookAsync">
                        追加
                    </MudButton>
                </MudStack>

                <MudDivider Class="my-2" />

                <MudList T="PhraseBookListItemModel"
                         Dense="true"
                         SelectedValue="_selectedBook"
                         SelectedValueChanged="OnBookSelectedAsync">
                    @if (_books.Count == 0)
                    {
                        <MudListItem T="PhraseBookListItemModel" Disabled="true">
                            <MudText>ブックがありません</MudText>
                        </MudListItem>
                    }
                    else
                    {
                        @foreach (var b in _books)
                        {
                            <MudListItem T="PhraseBookListItemModel" Value="@b">
                                <MudIcon Icon="@Icons.Material.TwoTone.MenuBook" Class="mr-2" />

                                @if (_renamingBookId == b.Id)
                                {
                                    <!-- インライン・リネーム入力（Enter=保存 / Esc=取消） -->
                                    <MudTextField T="string"
                                                  Id="@($"rename-{b.Id}")"
                                                  Class="mr-2"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Dense"
                                                  Immediate="true"
                                                  MaxLength="60"
                                                  Value="@_renameText"
                                                  ValueChanged="@((string? v) => _renameText = v ?? string.Empty)"
                                                  OnKeyDown="@(e => OnRenameKeyDown(e, b))"
                                                  Placeholder="新しい名称" />
                                }
                                else
                                {
                                    <MudText>@b.Name</MudText>
                                }

                                <MudSpacer />

                                <!-- 末尾アクション（重なり防止の inline-flex + gap） -->
                                <MudStack Row AlignItems="AlignItems.Center" Class="book-list-trailing">
                                    @if (_renamingBookId == b.Id)
                                    {
                                        <!-- 保存／キャンセル -->
                                        <MudIconButton Icon="@Icons.Material.Filled.Check"
                                                       Color="Color.Primary"
                                                       Disabled="@string.IsNullOrWhiteSpace((_renameText ?? string.Empty).Trim())"
                                                       OnClick="@(() => SaveRenameAsync(b))" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Close"
                                                       Color="Color.Default"
                                                       OnClick="@CancelRename" />
                                    }
                                    else
                                    {
                                        <!-- 編集（リネーム開始） -->
                                        <MudIconButton Icon="@Icons.Material.TwoTone.Edit"
                                                       Color="Color.Default"
                                                       OnClick="@(() => BeginRename(b))" />

                                        <!-- 件数 -->
                                        <MudChip Color="Color.Primary" Variant="Variant.Filled" Label="true">
                                            @((b.Count > 99999) ? "99999+" : b.Count.ToString())
                                        </MudChip>

                                        <!-- 削除 -->
                                        <MudIconButton Icon="@Icons.Material.TwoTone.Delete"
                                                       Color="Color.Error"
                                                       OnClick="@(() => OnDeleteBookAsync(b))" />
                                    }
                                </MudStack>
                            </MudListItem>
                        }
                    }
                </MudList>
            </MudCardContent>
        </BaseCard>
    </MudItem>

    <!-- 右：候補検索＋一覧 と ブックの中身 -->
    <MudItem xs="12" md="8" lg="9" Class="fi-safe-area">

        <!-- 候補（フィルタ） -->
        <BaseCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <SectionTitle HeadingLevel="3" Title="フレーズ選択（候補）" />
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent>
                @if (_initialized && !HasBooks)
                {
                    <MudAlert Severity="Severity.Info" Dense Class="mb-2">
                        まずフレーズ帳を作成してください。作成後、候補からブックへ追加できます。
                    </MudAlert>
                }

                <MudStack Row Wrap="Wrap.Wrap" AlignItems="AlignItems.End" Spacing="2" Class="mb-2">
                    <MudSelect T="PeriodFilter"
                               Label="期間"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense"
                               Value="@_period"
                               ValueChanged="OnPeriodChanged"
                               Style="width:150px">
                        <MudSelectItem T="PeriodFilter" Value="@PeriodFilter.Last30">直近30日</MudSelectItem>
                        <MudSelectItem T="PeriodFilter" Value="@PeriodFilter.Last90">直近90日</MudSelectItem>
                        <MudSelectItem T="PeriodFilter" Value="@PeriodFilter.All">すべて</MudSelectItem>
                    </MudSelect>

                    <MudCheckBox T="bool"
                                 Value="@_onlyNotInBook"
                                 ValueChanged="OnOnlyNotInBookChanged"
                                 Label="未登録のみ"
                                 Disabled="@(_selectedBook is null)" />
                </MudStack>

                <!-- 候補テーブル -->
                <SelectableTable TItem="PhraseListItemModel"
                                 @ref="_candidatesTable"
                                 Items="@_viewCandidates"
                                 IdSelector="@(x => x.Id)"
                                 Search="true"
                                 SearchPlaceholder="検索（英語・意味）"
                                 SearchBy="CandidateSearchBy"
                                 RowsPerPage="20"
                                 DeferFirstRender="true"
                                 Height="380px">
                    <ExtraToolbar Context="ctx">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.TwoTone.PlaylistAdd"
                                   Disabled="@(_selectedBook is null || ctx.SelectedCountInView == 0)"
                                   OnClick="@(() => AddSelectedAsync(ctx.GetSelectedIdsInView()))">
                            選択を追加（@ctx.SelectedCountInView）
                        </MudButton>
                    </ExtraToolbar>

                    <HeaderContent>
                        <MudTh>フレーズ</MudTh>
                        <MudTh>意味</MudTh>
                        <MudTh style="width:56px;"></MudTh>
                    </HeaderContent>

                    <RowTemplate Context="p">
                        <MudTd>@p.Phrase</MudTd>
                        <MudTd>@p.Meaning</MudTd>
                        <MudTd style="text-align:right;">
                            <MudIconButton Icon="@Icons.Material.TwoTone.AddCircle"
                                           Color="Color.Primary"
                                           Disabled="@(_selectedBook is null)"
                                           OnClick="@(() => AddSingleAsync(p.Id))" />
                        </MudTd>
                    </RowTemplate>

                    <NoRecordsContent>
                        <MudText Class="p-4">一致する候補がありません。</MudText>
                    </NoRecordsContent>
                </SelectableTable>
            </MudCardContent>
        </BaseCard>

        <!-- ブックの中身 -->
        <BaseCard Class="mt-2 book-section-elevated" id="book-section">
            <MudCardHeader>
                <CardHeaderContent>
                    <SectionTitle HeadingLevel="3" Title="@GetCurrentBookTitle()" />
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent>
                @if (_selectedBook is null)
                {
                    <MudText Class="p-2">左の一覧からブックを選択してください。</MudText>
                }
                else
                {
                    <SelectableTable TItem="PhraseBookItemModel"
                                     @ref="_bookTable"
                                     Items="@_bookItems"
                                     IdSelector="@(x => x.Id)"
                                     Search="true"
                                     SearchPlaceholder="検索（英語・意味）"
                                     SearchBy="BookSearchBy"
                                     RowsPerPage="10"
                                     DeferFirstRender="true"
                                     Height="360px">
                        <ExtraToolbar Context="ctx">
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.TwoTone.DeleteForever"
                                       Disabled="@(ctx.SelectedCountInView == 0)"
                                       OnClick="@(() => DeleteSelectedItemsAsync(ctx.GetSelectedIdsInView()))">
                                選択を削除（@ctx.SelectedCountInView）
                            </MudButton>
                        </ExtraToolbar>

                        <HeaderContent>
                            <MudTh>フレーズ</MudTh>
                            <MudTh>意味</MudTh>
                            <MudTh style="width:56px;"></MudTh>
                        </HeaderContent>

                        <RowTemplate Context="it">
                            <MudTd>@it.English</MudTd>
                            <MudTd>@it.Japanese</MudTd>
                            <MudTd style="text-align:right;">
                                <MudIconButton Icon="@Icons.Material.TwoTone.RemoveCircle"
                                               Color="Color.Error"
                                               OnClick="@(() => DeleteSingleItemAsync(it.Id))" />
                            </MudTd>
                        </RowTemplate>

                        <NoRecordsContent>
                            <MudText Class="p-2">このブックにはフレーズがありません。</MudText>
                        </NoRecordsContent>
                    </SelectableTable>
                }
            </MudCardContent>
        </BaseCard>

    </MudItem>
</MudGrid>

@if (_selectedBook is not null)
{
    <FloatingIndicator Show="true"
                       Icon="@Icons.Material.TwoTone.MenuBook"
                       Label="@_selectedBook!.Name"
                       Count="@CurrentBookCount"
                       CountMax="99999"
                       TargetElementId="book-section"
                       ActionText="表示"
                       ActionIcon="@Icons.Material.Filled.ArrowDownward" />
}

<style>
    .book-list-trailing {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        margin-left: 8px;
    }

    .book-section-elevated {
        box-shadow: 0 0 0 2px rgba(25,118,210,0.08);
    }

    .fi-safe-area {
        padding-bottom: 120px;
    }

    @@media (max-width: 960px) {
        .fi-safe-area {
            padding-bottom: 140px;
        }
    }

    @@supports (padding: max(0px)) {
        .fi-safe-area {
            padding-bottom: max(120px, calc(120px + env(safe-area-inset-bottom)));
        }
    }
</style>

@code {
    private string _newBookName = string.Empty;

    private List<PhraseBookListItemModel> _books = new();
    private PhraseBookListItemModel? _selectedBook;

    private SelectableTable<PhraseListItemModel>? _candidatesTable;
    private SelectableTable<PhraseBookItemModel>? _bookTable;

    private List<PhraseListItemModel> _allCandidates = new();
    private List<PhraseListItemModel> _viewCandidates = new();

    private List<PhraseBookItemModel> _bookItems = new();
    private HashSet<Guid> _bookItemIdSet = new();

    private PeriodFilter _period = PeriodFilter.Last30;
    private bool _onlyNotInBook = true;

    private Guid? _renamingBookId;
    private string _renameText = string.Empty;

    private bool _initialized = false;
    private bool HasBooks => _books is { Count: > 0 };

    private enum PeriodFilter { Last30, Last90, All }

    private int CurrentBookCount
        => _selectedBook is null ? 0 : (_books.FirstOrDefault(x => x.Id == _selectedBook.Id)?.Count ?? 0);

    protected override async Task OnInitializedAsync()
    {
        _books = await UiOperationRunner.ReadWithOverlayAsync(
            () => PhraseBookService.GetPhraseBooksAsync(),
            "ブックを読込中…") ?? new();

        _allCandidates = await UiOperationRunner.ReadWithOverlayAsync(
            () => PhraseService.GetPhraseListAsync(),
            "フレーズ候補を読込中…") ?? new();

        if (HasBooks)
        {
            _selectedBook = _books[0];
            await LoadBookItemsAsync();
        }

        ApplyFilters();
        _initialized = true;
    }

    private string GetCurrentBookTitle()
        => _selectedBook is null
           ? "選択中ブックのアイテム一覧：未選択"
           : $"「{_selectedBook.Name}」のアイテム一覧";

    // --- Enterで新規作成確定 ---
    private async Task OnNewBookNameKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            var name = (_newBookName ?? string.Empty).Trim();
            if (!string.IsNullOrWhiteSpace(name))
                await CreateBookAsync();
        }
    }

    private async Task CreateBookAsync()
    {
        if (string.IsNullOrWhiteSpace(_newBookName)) return;

        var created = await UiOperationRunner.WriteAsync(
            () => PhraseBookService.CreateAsync(_newBookName),
            "ブックを作成中…");
        if (!created.IsSuccess) return;

        _newBookName = string.Empty;

        _books = await UiOperationRunner.ReadAsync(
            () => PhraseBookService.GetPhraseBooksAsync()) ?? _books;

        var newId = created.Data;
        _selectedBook = _books.FirstOrDefault(x => x.Id == newId) ?? _books.FirstOrDefault();

        await RefreshBookAndListAsync();
    }

    private async Task OnDeleteBookAsync(PhraseBookListItemModel b)
    {
        var ok = await DialogService.ShowConfirmAsync(DialogConfirmType.DangerConfirm,
            $"「{b.Name}」を削除します。よろしいですか？");
        if (!ok) return;

        var result = await UiOperationRunner.WriteAsync(
            () => PhraseBookService.DeleteAsync(b.Id),
            "ブックを削除中…");
        if (!result.IsSuccess) return;

        _books = await UiOperationRunner.ReadAsync(
            () => PhraseBookService.GetPhraseBooksAsync()) ?? _books;

        if (_selectedBook?.Id == b.Id)
        {
            _selectedBook = _books.FirstOrDefault();
            _bookItems.Clear();
            _bookItemIdSet.Clear();

            if (_selectedBook is not null)
                await LoadBookItemsAsync();
        }

        ApplyFilters();
    }

    private async Task OnBookSelectedAsync(PhraseBookListItemModel? b)
    {
        _selectedBook = b;

        await LoadBookItemsAsync();
        ApplyFilters();
    }

    private async Task LoadBookItemsAsync()
    {
        if (_selectedBook is null) return;

        var data = await UiOperationRunner.ReadAsync(
            () => PhraseBookService.GetItemsAsync(_selectedBook.Id));
        _bookItems = data ?? new();

        _bookItemIdSet = _bookItems.Select(x => x.Id).ToHashSet();
    }

    private void OnPeriodChanged(PeriodFilter v)
    {
        _period = v;
        ApplyFilters();
    }

    private void OnOnlyNotInBookChanged(bool v)
    {
        _onlyNotInBook = v;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        IEnumerable<PhraseListItemModel> q = _allCandidates;

        var now = DateTime.UtcNow;
        if (_period == PeriodFilter.Last30)
            q = q.Where(x => x.CreatedAt >= now.AddDays(-30));
        else if (_period == PeriodFilter.Last90)
            q = q.Where(x => x.CreatedAt >= now.AddDays(-90));

        if (_onlyNotInBook && _bookItemIdSet.Count > 0)
            q = q.Where(x => !_bookItemIdSet.Contains(x.Id));

        _viewCandidates = q
            .OrderByDescending(x => x.CreatedAt)
            .ToList();

        StateHasChanged();
    }

    private async Task AddSelectedAsync(HashSet<Guid> ids)
    {
        if (_selectedBook is null || ids.Count == 0) return;

        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.InfoConfirm,
            $"選択中の {ids.Count} 件を「{_selectedBook.Name}」へ追加します。よろしいですか？");
        if (!ok) return;

        var write = await UiOperationRunner.WriteAsync(
            () => PhraseBookService.CreateAsync(_selectedBook.Id, ids),
            "ブックに追加中…");
        if (!write.IsSuccess) return;

        await RefreshBookAndListAsync();
        _candidatesTable?.ClearSelection();

        await Js.ScrollToIdAsync("book-section", true);
    }

    private async Task AddSingleAsync(Guid id)
    {
        if (_selectedBook is null) return;

        var write = await UiOperationRunner.WriteAsync(
            () => PhraseBookService.CreateAsync(_selectedBook.Id, new[] { id }),
            "ブックに追加中…");
        if (!write.IsSuccess) return;

        await RefreshBookAndListAsync();

        await Js.ScrollToIdAsync("book-section", true);
    }

    private async Task DeleteSelectedItemsAsync(HashSet<Guid> ids)
    {
        if (_selectedBook is null || ids.Count == 0) return;

        var ok = await DialogService.ShowConfirmAsync(DialogConfirmType.DangerConfirm,
            $"「{_selectedBook.Name}」から選択中 {ids.Count} 件を削除します。よろしいですか？");
        if (!ok) return;

        var res = await UiOperationRunner.WriteAsync(
            () => PhraseBookService.DeleteAsync(_selectedBook.Id, ids),
            "ブックから削除中…");
        if (!res.IsSuccess) return;

        await RefreshBookAndListAsync();
        _bookTable?.ClearSelection();

    }

    private async Task DeleteSingleItemAsync(Guid id)
    {
        if (_selectedBook is null) return;

        var res = await UiOperationRunner.WriteAsync(
            () => PhraseBookService.DeleteAsync(_selectedBook.Id, new[] { id }),
            "ブックから削除中…");
        if (!res.IsSuccess) return;

        await RefreshBookAndListAsync();
    }

    private async Task RefreshBookAndListAsync()
    {
        _books = await UiOperationRunner.ReadAsync(
            () => PhraseBookService.GetPhraseBooksAsync()) ?? _books;

        if (_selectedBook is not null)
            _selectedBook = _books.FirstOrDefault(x => x.Id == _selectedBook!.Id) ?? _selectedBook;

        await LoadBookItemsAsync();
        ApplyFilters();
    }

    private async Task BeginRename(PhraseBookListItemModel b)
    {
        _renamingBookId = b.Id;
        _renameText = b.Name ?? string.Empty;
        await Js.FocusByIdAsync($"rename-{b.Id}");
    }

    private void CancelRename()
    {
        _renamingBookId = null;
        _renameText = string.Empty;
        StateHasChanged();
    }

    private async Task SaveRenameAsync(PhraseBookListItemModel b)
    {
        var newName = (_renameText ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(newName))
        {
            Snackbar.Add("名称を入力してください。", Severity.Warning);
            return;
        }
        if (newName == (b.Name ?? string.Empty))
        {
            CancelRename();
            return;
        }

        var res = await UiOperationRunner.WriteAsync(
            () => PhraseBookService.UpdateAsync(b.Id, newName),
            "名称を更新中…");
        if (!res.IsSuccess) return;

        _books = await UiOperationRunner.ReadAsync(
            () => PhraseBookService.GetPhraseBooksAsync()) ?? _books;

        if (_selectedBook?.Id == b.Id)
            _selectedBook = _books.FirstOrDefault(x => x.Id == b.Id) ?? _selectedBook;

        _renamingBookId = null;
        _renameText = string.Empty;

        StateHasChanged();
    }

    // Enter=保存 / Esc=取消（インラインリネーム）
    private async Task OnRenameKeyDown(KeyboardEventArgs e, PhraseBookListItemModel b)
    {
        if (e.Key == "Enter")
            await SaveRenameAsync(b);
        else if (e.Key == "Escape")
            CancelRename();
    }

    private IEnumerable<string> CandidateSearchBy(PhraseListItemModel p)
        => new[] { p.Phrase ?? "", p.Meaning ?? "" };

    private IEnumerable<string> BookSearchBy(PhraseBookItemModel it)
        => new[] { it.English ?? "", it.Japanese ?? "" };
}
