@page "/tests/result"
@attribute [Authorize]

@inject TestResultSession TestResult
@inject ReviewSession ReviewSession
@inject TestResultService TestResultService
@inject GradeService GradeService
@inject UiOperationRunner UiRunner
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject JsInteropManager JS

<MudStack Spacing="3" AlignItems="AlignItems.Center">
    <!-- ヘッダ -->
    <!-- ヘッダ：バッジ + 成績チップ -->
    <MudStack Spacing="1" AlignItems="AlignItems.Center">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudImage Src="@GradeImageSrc" Alt="@($"Result ({GradeSymbol})")" Width="120" Height="120" />
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudImage Src="@GradeImageSrc" Alt="@($"Result ({GradeSymbol})")" Width="96" Height="96" />
        </MudHidden>

        <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large">
            成績：@GradeSymbol
        </MudChip>
        <MudText Typo="Typo.h5">テスト結果</MudText>
        <MudText Typo="Typo.subtitle1">
            正解 @TestResult.Correct / 合計 @TestResult.Total（正答率 @((int)(TestResult.Rate() * 100))%）
        </MudText>
    </MudStack>


    <BaseCard Class="pa-4">
        <!-- ▲ ボタンをテーブルの上に配置 -->
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <!-- Md以上：横並び -->
            <MudStack Row="true" Spacing="2" Justify="Justify.FlexEnd" Class="mb-2">
                <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="RetestWrong" Disabled="@(_wrongCount == 0)">
                    不正解だけ再テスト
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="RetestAll" Disabled="@(TestResult.Total == 0)">
                    すべて再テスト
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FinishAsync">
                    終了
                </MudButton>
            </MudStack>
        </MudHidden>

        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <!-- Sm以下：縦積み -->
            <MudStack Spacing="1" Class="mb-2">
                <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="RetestWrong" Disabled="@(_wrongCount == 0)">
                    不正解だけ再テスト
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="RetestAll" Disabled="@(TestResult.Total == 0)">
                    すべて再テスト
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FinishAsync">
                    終了
                </MudButton>
            </MudStack>
        </MudHidden>

        <!-- 明細テーブル -->
        <MudTable Items="TestResult.Items" Dense="true" Hover="true" Bordered="false" Striped="true" Breakpoint="Breakpoint.Md">
            <HeaderContent>
                <MudTh>結果</MudTh>
                <MudTh>英作文（Front）</MudTh>
                <MudTh>日本語（Back）</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    @if (context.IsCorrect)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" />
                    }
                </MudTd>
                <MudTd>@context.Front</MudTd>
                <MudTd>@context.Back</MudTd>
            </RowTemplate>
        </MudTable>
    </BaseCard>
</MudStack>

@code {
    private bool _saved;
    private string? _gradeName;
    private int _wrongCount => TestResult.Total - TestResult.Correct;

    private string LocalGradeSymbol
    {
        get
        {
            var pct = (int)(TestResult.Rate() * 100);
            if (pct >= 90) return "S";
            if (pct >= 75) return "A";
            if (pct >= 60) return "B";
            return "D";
        }
    }

    // 表示用：DBで確定した記号があればそれを優先、なければローカル推定
    private string GradeSymbol => (_gradeName ?? LocalGradeSymbol).ToUpperInvariant();

    private string GradeImageSrc => GradeSymbol switch
    {
        "S" => "/images/laurel_gold.svg",
        "A" => "/images/laurel_green.svg",
        "B" => "/images/laurel_blue.svg",
        _ => "/images/laurel_gray.svg"   // D ほか未知はグレー
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || _saved) return;

        var res = await UiRunner.WriteAsync<Guid>(
            () => TestResultService.SaveAsync(TestResult, ReviewSession.Items));

        if (res.IsSuccess)
        {
            _saved = true;
            _gradeName = LocalGradeSymbol;
            Snackbar.Add("テスト結果を保存しました。", Severity.Success);
        }
        else
        {
            Snackbar.Add(res.Message ?? "保存に失敗しました。", Severity.Error);
        }

        StateHasChanged();
    }

    private void RetestWrong()
    {
        var wrong = TestResult.WrongOnly();
        ReviewSession.Set(wrong, x => x.Front, x => x.Back);
        Nav.NavigateTo("/phrases/writing");
    }

    private void RetestAll()
    {
        ReviewSession.Set(TestResult.Items, x => x.Front, x => x.Back);
        Nav.NavigateTo("/phrases/writing");
    }

    private Task FinishAsync()
    {
        Nav.NavigateTo("/");   // ← Home へ
        return Task.CompletedTask;
    }
}
