@page "/admin/settings/review-types/create"
@page "/admin/settings/review-types/edit/{Id:guid}"
@attribute [Authorize(Roles = "Admin")]

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ReviewTypeService Service
@inject UiOperationRunner UiOperationRunner
@inject IServiceProvider ServiceProvider

<EditForm EditContext="_editCtx" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
    <FluentValidationValidator />
    <MudStack Spacing="2">
        <ActionCard>
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Outlined"
                       Size="@AppConstants.SIZE_BUTTON"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.TwoTone.Save">
                @AppConstants.LABEL_BUTTON_REGISTER
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Size="@AppConstants.SIZE_BUTTON"
                       Color="Color.Default"
                       StartIcon="@Icons.Material.TwoTone.Block"
                       OnClick="ClearAsync">
                @AppConstants.LABEL_BUTTON_CLEAR
            </MudButton>
        </ActionCard>

        <BaseCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <SectionTitle HeadingLevel="3" Title="復習種別入力" />
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent Class="pt-0">
                <MudGrid Spacing="1">
                    <MudItem xs="12" md="6">
                        <MudTextField T="string"
                                      @bind-Value="_model.Name"
                                      For="() => _model.Name"
                                      Margin="Margin.Dense"
                                      Variant="Variant.Outlined"
                                      Label="復習種別名"
                                      ShrinkLabel />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </BaseCard>
    </MudStack>
</EditForm>

@code {
    [Parameter] public Guid? Id { get; set; }
    private bool IsEdit => Id.HasValue;
    private PhrazorApp.Models.ReviewTypeModel _model = new();
    private EditContext? _editCtx;

    protected override async Task OnInitializedAsync()
    {
        _editCtx = new EditContext(_model);

        if (IsEdit)
        {
            var loaded = await UiOperationRunner.ReadAsync(
                () => Service.GetAsync(Id!.Value));
            _model = loaded ?? new PhrazorApp.Models.ReviewTypeModel { Id = Id!.Value };
        }
        else
        {
            _model = new PhrazorApp.Models.ReviewTypeModel { Id = Guid.NewGuid() };
        }

        _editCtx = new EditContext(_model);
    }

    private Task HandleValidSubmit() => SubmitCoreAsync();

    private async Task SubmitCoreAsync()
    {
        var op = await UiOperationRunner.WriteAsync(
            () => IsEdit ? Service.UpdateAsync(_model)
                         : Service.CreateAsync(_model),
            message: AppMessages.MSG_I_PROGRESS_SAVE);

        if (!op.IsSuccess) return;
        NavigationManager.NavigateTo("/admin/settings/reviewtypes");
    }

    private void OnInvalidSubmit(EditContext editContext)
        => editContext.PublishPageLevelErrors(ServiceProvider);

    private Task ClearAsync()
    {
        _model = new PhrazorApp.Models.ReviewTypeModel { Id = Guid.NewGuid() };
        _editCtx = new EditContext(_model);
        StateHasChanged();
        return Task.CompletedTask;
    }
}
