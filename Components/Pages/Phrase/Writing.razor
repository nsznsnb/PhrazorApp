@page "/phrases/writing"
@page "/tests/writing"

@attribute [Authorize]

@using System.Text
@using System.Text.RegularExpressions
@using Microsoft.JSInterop

@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ReviewSession ReviewSession
@inject TestResultSession TestResultSession

<MudStack Spacing="2">
    <SectionTitle Title="英作文テスト" />

    <!-- アクション -->
    <ActionCard>
        <MudText Typo="Typo.subtitle2">
            @(_count == 0 ? "（データなし）" : $"{_index + 1} / {_count}")
        </MudText>

        <MudSpacer />

        <MudButton Variant="Variant.Outlined" Color="Color.Secondary"
                   StartIcon="@Icons.Material.TwoTone.Lightbulb"
                   Disabled="@(!_canHint)" OnClick="GiveHint">
            ヒント
        </MudButton>

        <MudButton Variant="Variant.Outlined" Color="Color.Info"
                   StartIcon="@Icons.Material.TwoTone.Visibility"
                   OnClick="@(() => _peek = !_peek)">
            チラ見
        </MudButton>

        <MudButton Variant="Variant.Outlined" Color="Color.Error"
                   StartIcon="@Icons.Material.TwoTone.StopCircle"
                   OnClick="CancelAsync">
            キャンセル
        </MudButton>
    </ActionCard>

    <BaseCard>
        <MudStack Spacing="3" AlignItems="AlignItems.Center" Class="py-4">

            <!-- 進捗（レスポンシブ幅） -->
            <MudGrid Justify="Justify.Center">
                <MudItem Xs="12" Sm="10" Md="8" LG="7" XL="6">
                    <MudProgressLinear Value="@ProgressPercent" Rounded="true" />
                </MudItem>
            </MudGrid>

            <!-- 出題（No 左上） -->
            <MudGrid Justify="Justify.Center">
                <MudItem Xs="12" Sm="10" Md="8" LG="7" XL="6">
                    <MudCard Elevation="10" Class="p-6">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.overline" Align="Align.Left">No. @_indexPlus1</MudText>
                            <MudText Typo="Typo.h6" Align="Align.Center">@_current.Back</MudText>
                        </MudStack>
                    </MudCard>
                </MudItem>
            </MudGrid>

            <!-- 回答（上=入力 / 下=入力補助：どちらも MudTextField） -->
            <MudGrid Justify="Justify.Center">
                <MudItem Xs="12" Sm="10" Md="8" LG="7" XL="6">
                    <EditForm Model="_form" OnValidSubmit="SubmitAsync">
                        <MudStack Spacing="1" AlignItems="AlignItems.Stretch">

                            <!-- 入力欄（等幅） -->
                            <MudTextField T="string"
                                          @bind-Value="Answer"
                                          Variant="Variant.Text"
                                          FullWidth="true"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.TwoTone.EditNote"
                                          Immediate="true"
                                          Class="mono-input" />

                            <!-- 入力補助（等幅・同じTextField・読み取り専用） -->
                            <MudTextField T="string"
                                          Value="@_assistText"
                                          ReadOnly="true"
                                          Variant="Variant.Text"
                                          FullWidth="true"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.TwoTone.EditNote"
                                          Class="mono-input assist-input" />

                            <!-- ボタン＆集計（詰めて並べ、必要時のみ折返し） -->
                            <MudStack Row="true" Wrap="Wrap.Wrap" Spacing="1"
                                      AlignItems="AlignItems.Center" Justify="Justify.Center"
                                      Class="mt-2">

                                <MudButton ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled" Color="Color.Primary"
                                           StartIcon="@Icons.Material.TwoTone.CheckCircle">
                                    解答
                                </MudButton>

                                <MudButton Variant="Variant.Outlined" Color="Color.Warning"
                                           StartIcon="@Icons.Material.TwoTone.SkipNext"
                                           OnClick="SkipAsWrongAsync">
                                    次へ（×扱い）
                                </MudButton>

                                <MudButton Variant="Variant.Outlined" Color="Color.Default"
                                           StartIcon="@Icons.Material.TwoTone.RestartAlt"
                                           OnClick="ClearInput">
                                    クリア
                                </MudButton>

                                <MudChip T="string" Color="Color.Default" Variant="Variant.Outlined">
                                    残り試行 @_attemptsLeft / 5
                                </MudChip>
                                <MudChip T="string" Color="Color.Success" Variant="Variant.Outlined">
                                    正解 @_correctCount
                                </MudChip>
                                <MudChip T="string" Color="Color.Error" Variant="Variant.Outlined">
                                    不正解 @_wrongCount
                                </MudChip>
                            </MudStack>
                        </MudStack>
                    </EditForm>

                    @if (_peek)
                    {
                        <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Dense="true" Elevation="0" Class="mt-2">
                            解答（チラ見）：@_current.Front
                        </MudAlert>
                    }
                </MudItem>
            </MudGrid>
        </MudStack>
    </BaseCard>
</MudStack>

<style>
    /* 入力と補助を等幅で完全一致させる */
    :root {
        --mono-font-stack: ui-monospace, "Cascadia Mono", Consolas, "SFMono-Regular", "Source Code Pro", "Noto Sans Mono", "Liberation Mono", monospace;
        --mono-size: 1rem;
        --mono-line: 1.5rem;
    }

    /* MudTextField 内 input 要素に適用 */
    .mono-input .mud-input-slot input {
        font-family: var(--mono-font-stack) !important;
        font-size: var(--mono-size) !important;
        line-height: var(--mono-line) !important;
        letter-spacing: 0 !important;
        font-variant-ligatures: none !important;
    }

    /* 下の補助欄：色を薄く、アイコンは非表示（幅は保持） */
    .assist-input .mud-input-slot input {
        color: rgba(0,0,0,.54);
        caret-color: transparent; /* キャレットを見せない */
    }

    .assist-input .mud-input-adornment-start {
        visibility: hidden;
    }
</style>

@code {
    [Parameter, SupplyParameterFromQuery] public string? Return { get; set; }

    // データ
    private List<ReviewSession.Card> _items = new();
    private int _index;
    private int _count;
    private int _indexPlus1 => _index + 1;
    private ReviewSession.Card _current = new(Guid.Empty, "", "");

    // 集計
    private readonly List<TestResultSession.Row> _rows = new();
    private int _attemptsLeft = 5;
    private int _answeredCount;
    private int _correctCount;
    private int _wrongCount;
    private double ProgressPercent => _count == 0 ? 0 : (_answeredCount * 100.0 / _count);

    // 入力モデル（副作用は setter へ）
    private sealed class AnswerForm { public string Answer { get; set; } = string.Empty; }
    private AnswerForm _form = new();
    private string Answer
    {
        get => _form.Answer;
        set { _form.Answer = value ?? string.Empty; RebuildAssist(); }
    }

    // 単語ヒント
    private static readonly Regex WordRegex = new(@"[A-Za-z0-9'’]+", RegexOptions.Compiled);
    private List<(int start, int length)> _wordSpans = new();
    private HashSet<int> _revealedWords = new(); // 単語インデックス（0-based）
    private bool _canHint => _wordSpans.Count > _revealedWords.Count;

    // 入力補助の文字列（未公開＆未正答は '·'）
    private string _assistText = string.Empty;

    private bool _peek;

    protected override void OnInitialized()
    {
        _items = new List<ReviewSession.Card>(ReviewSession.Items);
        _count = _items.Count;

        if (_count == 0)
        {
            Snackbar.Add("テスト対象が設定されていません。フレーズ一覧から選択して開始してください。", Severity.Warning);
            Navigation.NavigateTo("/phrases");
            return;
        }

        _index = 0;
        LoadCurrent();
    }

    private void LoadCurrent()
    {
        _current = _items[_index];
        _form.Answer = string.Empty;
        _attemptsLeft = 5;
        _revealedWords.Clear();
        _peek = false;

        _wordSpans = new();
        foreach (Match m in WordRegex.Matches(_current.Front))
            _wordSpans.Add((m.Index, m.Length));

        RebuildAssist();
    }

    private List<int> RemainingWordIndices()
    {
        var list = new List<int>();
        for (int i = 0; i < _wordSpans.Count; i++)
            if (!_revealedWords.Contains(i)) list.Add(i);
        return list;
    }

    // ヒント：単語を1つ公開 → 入力は触らず → 補助欄のみ更新
    private void GiveHint()
    {
        var remain = RemainingWordIndices();
        if (remain.Count == 0) return;

        var rnd = new Random();
        var pick = remain[rnd.Next(remain.Count)];
        _revealedWords.Add(pick);

        RebuildAssist();

        Snackbar.Add("ヒントを表示しました（単語を1つ公開）。", Severity.Info);
    }

    // 入力補助の再構築（公開 or 正しく入力 → 実文字／それ以外 → 中黒）
    private void RebuildAssist()
    {
        var t = _current.Front ?? string.Empty;
        var u = _form.Answer ?? string.Empty;

        var sb = new StringBuilder(t.Length);
        for (int i = 0; i < t.Length; i++)
        {
            char expected = t[i];
            char disp = NormalizeAsciiPunct(expected);

            if (IsWordChar(expected))
            {
                bool hinted = IsInRevealedWord(i);
                bool typedOk = i < u.Length &&
                               char.ToLowerInvariant(NormalizeAsciiPunct(u[i])) ==
                               char.ToLowerInvariant(disp);

                sb.Append((hinted || typedOk) ? disp : '·');
            }
            else
            {
                sb.Append(disp);
            }
        }
        _assistText = sb.ToString();
        StateHasChanged();
    }

    private bool IsInRevealedWord(int charIndex)
    {
        for (int wi = 0; wi < _wordSpans.Count; wi++)
        {
            var (s, len) = _wordSpans[wi];
            if (charIndex >= s && charIndex < s + len)
                return _revealedWords.Contains(wi);
        }
        return false;
    }

    private static bool IsWordChar(char ch)
        => char.IsLetterOrDigit(ch) || ch == '\'' || ch == '’';

    private static char NormalizeAsciiPunct(char ch) => ch switch
    {
        '’' or '‘' => '\'',
        '“' or '”' => '"',
        '–' or '—' => '-',
        _ => ch
    };

    private async Task SubmitAsync()
    {
        var input = _form.Answer;
        if (string.IsNullOrWhiteSpace(input))
        {
            Snackbar.Add("英作文を入力してください。", Severity.Warning);
            return;
        }

        var user = NormalizeForJudge(input);
        var expected = NormalizeForJudge(_current.Front);

        if (user == expected)
        {
            _correctCount++;
            _answeredCount++;
            _rows.Add(new TestResultSession.Row(_current.Front, _current.Back, true));
            Snackbar.Add("正解です！", Severity.Success);
            await NextAsync();
        }
        else
        {
            _attemptsLeft--;
            if (_attemptsLeft > 0)
            {
                Snackbar.Add($"不正解です。もう一度試してください（残り {_attemptsLeft} 回）", Severity.Error);
            }
            else
            {
                await ProceedWrongAsync(); // 正答表示 → 次へ
            }
        }
    }

    // 「次へ（×扱い）」：即座に不正解として進む
    private async Task SkipAsWrongAsync() => await ProceedWrongAsync();

    // 不正解の記録 → 正答を表示 → 次へ
    private async Task ProceedWrongAsync()
    {
        _wrongCount++;
        _answeredCount++;
        _rows.Add(new TestResultSession.Row(_current.Front, _current.Back, false));

        var html =
            "<div style='white-space:pre-wrap'>" +
            System.Net.WebUtility.HtmlEncode(_current.Front) +
            "</div>" +
            "<p style='margin-top:12px;color:rgba(0,0,0,.6)'>不正解として記録しました。正答を確認して次へ進みます。</p>";

        await DialogService.ShowMessageBox("正答", (MarkupString)html, yesText: "次へ");

        await NextAsync();
    }

    private void ClearInput()
    {
        _form.Answer = string.Empty;
        RebuildAssist();
    }

    // 採点用正規化：記号無視・空白圧縮・大小無視
    private static string NormalizeForJudge(string s)
    {
        var onlyLettersSpaces = new string(s.Where(ch => char.IsLetterOrDigit(ch) || char.IsWhiteSpace(ch)).ToArray());
        var collapsed = Regex.Replace(onlyLettersSpaces, "\\s+", " ").Trim();
        return collapsed.ToLowerInvariant();
    }

    private async Task NextAsync()
    {
        if (_answeredCount >= _count)
        {
            TestResultSession.Set(_rows);
            Navigation.NavigateTo("/tests/result");
            return;
        }

        _index = Math.Min(_index + 1, _count - 1);
        LoadCurrent();
        await Task.CompletedTask;
    }

    // JSなしで戻る
    private async Task CancelAsync()
    {
        var ok = await DialogService.ShowConfirmAsync(DialogConfirmType.DeleteConfirm, "テストを中止しますか？");
        if (!ok) return;

        // 明示の戻り先があれば優先
        if (!string.IsNullOrEmpty(Return))
        {
            Navigation.NavigateTo(Return);
            return;
        }

        // 履歴で直前のページへ
        try
        {
            await JS.InvokeVoidAsync("history.back");
        }
        catch
        {
            // 念のためのフォールバック
            Navigation.NavigateTo("/phrases");
        }
    }
}
