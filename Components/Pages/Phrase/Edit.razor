@page "/phrases/create"
@page "/phrases/edit/{Id:guid}"
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject GenreService GenreService
@inject PhraseService PhraseService
@inject UiOperationRunner UiOperationRunner

<PageTitle>@(isEdit ? "フレーズ編集" : "フレーズ新規作成")</PageTitle>

<BackLink Href="/phrases" />

<MudForm Model="@model" @ref="@form" ValidationDelay="0">
    <MudStack Spacing="2">
        <SectionTitle Title="@(isEdit ? "フレーズ編集" : "フレーズ新規作成")" />
        <ActionCard>
            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Primary" StartIcon="@Icons.Material.TwoTone.Save" OnClick="SubmitAsync">@AppConstants.LABEL_BUTTON_REGISTER</MudButton>
            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Default" StartIcon="@Icons.Material.TwoTone.RestartAlt" OnClick="ClearAsync">@AppConstants.LABEL_BUTTON_CLEAR</MudButton>
        </ActionCard>

        <BaseCard>
            <MudCardContent Class="py-2">
                <MudGrid Spacing="1">
                    <MudItem xs="12" md="12">
                        <MudTextField T="string" Label="フレーズ" Variant="Variant.Outlined" @bind-Value="@model.Phrase" Immediate="true" MaxLength="200"
                                      Lines="3" HelperText="@(string.Format(AppMessages.MSG_I_HELPER_REQUIRED_LESS_THAN, "英文", "200"))" ShrinkLabel />
                    </MudItem>
                    <MudItem xs="12" md="12">
                        <MudTextField T="string" Label="意味" Variant="Variant.Outlined" @bind-Value="@model.Meaning" Lines="3" Immediate="true" MaxLength="200"
                                      HelperText="@(string.Format(AppMessages.MSG_I_HELPER_REQUIRED_LESS_THAN, "英文の意味", "200"))" ShrinkLabel />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <ImageGeneratorContainer Prompt="@model.Phrase" @bind-ImageUrl="@model.ImageUrl" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <GenreSelectorContainer @ref="_selector"
                                          @bind-SelectedItems="model.SelectedDropItems"
                                          MaxSelection="3"
                                          OnAddGenreClicked="OpenGenreDialog" />
                    </MudItem>
                    <MudItem xs="12" md="12">
                        <MudTextField T="string" Label="Note" Variant="Variant.Outlined" @bind-Value="@model.Note" Lines="3"
                                      HelperText="@(string.Format(AppMessages.MSG_I_HELPER_ARBITRARY_LESS_THAN, "解説や備考", "200"))"
                                      ShrinkLabel />
                    </MudItem>
                    <MudFlexBreak />
                </MudGrid>
            </MudCardContent>
        </BaseCard>

        <ActionCard>
            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Primary" StartIcon="@Icons.Material.TwoTone.Save" OnClick="SubmitAsync">@AppConstants.LABEL_BUTTON_REGISTER</MudButton>
            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error" StartIcon="@Icons.Material.TwoTone.Block" OnClick="ClearAsync">@AppConstants.LABEL_BUTTON_CLEAR</MudButton>
            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" StartIcon="@Icons.Material.TwoTone.NavigateBefore" OnClick="@(() => NavigationManager.NavigateTo("/phrases"))">@AppConstants.LABEL_BUTTON_RETURN_INDEX</MudButton>
        </ActionCard>
    </MudStack>
</MudForm>

@code {
    [Parameter] public Guid? Id { get; set; }

    private MudForm? form;
    private GenreSelectorContainer? _selector;
    private bool isEdit;
    private PhraseEditModel model = new();

    protected override async Task OnInitializedAsync()
    {
        isEdit = Id.HasValue;
        await ClearAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Yield(); // 子の @ref 安定を待つ
            if (_selector is not null)
                await _selector.ReloadAsync(model.SelectedDropItems);
        }
    }

    private async Task ClearAsync()
    {
        if (isEdit)
        {
            // 編集：サービスから読み込み
            var loaded = await UiOperationRunner.ReadAsync(
                () => PhraseService.GetPhraseEditAsync(Id!.Value)
            );
            model = loaded ?? new PhraseEditModel { Id = Id!.Value };
        }
        else
        {
            // 新規：ローカル初期化のみ
            model = new PhraseEditModel { Id = Guid.NewGuid() };
        }

        form?.ResetValidation();
    }

    private async Task SubmitAsync()
    {
        await form!.Validate();
        if (!form.IsValid) return;

        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.InfoConfirm,
            string.Format(AppMessages.MSG_I_CONFIRM_REGIST, model.Phrase));
        if (!ok) return;

        var op = await UiOperationRunner.WriteAsync(
            () => isEdit
                ? PhraseService.UpdatePhraseAsync(model)
                : PhraseService.CreatePhraseAsync(model),
            message: AppMessages.MSG_I_PROGRESS_SAVE
        );

        if (!op.IsSuccess) return;

        NavigationManager.NavigateTo("/phrases");
    }

    private async Task OpenGenreDialog()
    {
        var dlg = await DialogService.ShowWithAsync<GenreFormDialogHost, Guid?>(
            title: "ジャンル登録",
            paramSelector: x => x.GenreId,
            value: null,
            options: DialogServiceExtensions.OptionsMd()
        );

        var result = await dlg.Result;
        if (!(result?.Canceled ?? true))
        {
            await _selector!.ReloadAsync(model.SelectedDropItems); // 登録直後に再読込
        }


    }
}
