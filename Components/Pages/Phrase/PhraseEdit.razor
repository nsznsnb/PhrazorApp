@page "/phrases/create"
@page "/phrases/edit/{Id:guid}"
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject GenreService GenreService
@inject PhraseService PhraseService
@inject LoadingService OverlayService

<BackLink Href="/phrases" />

<MudForm Model="@model" @ref="@form" ValidationDelay="0">

    <MudStack Spacing="2">
        <SectionTitle Title="@(isEdit ? "フレーズ編集" : "フレーズ新規作成")" />
        <ActionCard>
            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Primary" StartIcon="@Icons.Material.TwoTone.Save" OnClick="SubmitAsync">@AppConstants.LABEL_BUTTON_REGISTER</MudButton>
            <MudButton Variant="Variant.Filled" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error" StartIcon="@Icons.Material.TwoTone.Block" OnClick="ClearAsync">@AppConstants.LABEL_BUTTON_CLEAR</MudButton>
            <MudButton Variant="Variant.Filled" Size="@AppConstants.SIZE_BUTTON" StartIcon="@Icons.Material.TwoTone.NavigateBefore" OnClick="@(() => NavigationManager.NavigateTo("/phrases"))">@AppConstants.LABEL_BUTTON_RETURN_INDEX</MudButton>
        </ActionCard>

        <BaseCard>
            <MudCardContent Class="py-2">
                <MudGrid Spacing="1">
                    <MudItem xs="12" md="12">
                        <MudTextField T="string" Label="フレーズ" Variant="Variant.Outlined" @bind-Value="@model.Phrase" Immediate="true" MaxLength="200"
                                      Lines="3" HelperText="@(string.Format(AppMessages.MSG_I_HELPER_REQUIRED_LESS_THAN, "英文", "200"))" ShrinkLabel />
                    </MudItem>
                    <MudItem xs="12" md="12">
                        <MudTextField T="string" Label="意味" Variant="Variant.Outlined" @bind-Value="@model.Meaning" Lines="3" Immediate="true" MaxLength="200"
                                      HelperText="@(string.Format(AppMessages.MSG_I_HELPER_REQUIRED_LESS_THAN, "英文の意味", "200"))" ShrinkLabel />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <ImageGenerator Prompt="@model.Phrase" @bind-ImageUrl="@model.ImageUrl" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <ItemDropSelector SelectedItems="@model.SelectedDropItems" MaxSelection="3" UnassignedLabel="カテゴリ" OnAddGenreClicked="OpenGenreDialog" />
                    </MudItem>
                    <MudItem xs="12" md="12">
                        <MudTextField T="string" Label="Note" Variant="Variant.Outlined" @bind-Value="@model.Note" Lines="3"
                                      HelperText="@(string.Format(AppMessages.MSG_I_HELPER_ARBITRARY_LESS_TAHN, "解説や備考", "200"))" ShrinkLabel />
                    </MudItem>
                    <MudFlexBreak />
                </MudGrid>
            </MudCardContent>
        </BaseCard>
        <ActionCard>
            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Primary" StartIcon="@Icons.Material.TwoTone.Save" OnClick="SubmitAsync">@AppConstants.LABEL_BUTTON_REGISTER</MudButton>
            <MudButton Variant="Variant.Filled" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error" StartIcon="@Icons.Material.TwoTone.Block" OnClick="ClearAsync">@AppConstants.LABEL_BUTTON_CLEAR</MudButton>
            <MudButton Variant="Variant.Filled" Size="@AppConstants.SIZE_BUTTON" StartIcon="@Icons.Material.TwoTone.NavigateBefore" OnClick="@(() => NavigationManager.NavigateTo("/phrases"))">@AppConstants.LABEL_BUTTON_RETURN_INDEX</MudButton>
        </ActionCard>
    </MudStack>
</MudForm>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    MudForm form;

    private bool isEdit = false;
    private PhraseModel model = new PhraseModel();

    protected override async Task OnInitializedAsync()
    {
        isEdit = Id != null;

        await ClearAsync();
    }

    private async Task ClearAsync()
    {
        model = await PhraseService.GetPhraseViewModelAsync(Id ?? null);

        if (form != null)
        {
            // form.ResetValidation();
        }
    }

    private async Task SubmitAsync()
    {
        await form.Validate();
        if (!form.IsValid) return;

        // 確認ダイアログ（OKなら続行）
        if (!await DialogService.ShowConfirmAsync(
                DialogConfirmType.RegisterConfirm,
                string.Format(AppMessages.MSG_I_CONFIRM_REGIST, model.Phrase)))
        {
            return;
        }

        var serviceResult = isEdit
            ? await PhraseService.UpdatePhraseAsync(model)
            : await PhraseService.CreatePhraseAsync(model);

        Snackbar.AddServiceResult(serviceResult);

        if (!serviceResult.IsSuccess) return;

        NavigationManager.NavigateTo("/phrases");
    }

    private Task OnSelectedChanged(HashSet<Guid> updated)
    {
        return Task.CompletedTask;
    }

    private async Task OpenGenreDialog()
    {
        var parameters = new DialogParameters
    {
        { "GenreId", (Guid?)null } // 編集時は ID を渡す
    };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = DialogService.Show<DialogGenreForm>("ジャンル登録", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var genre = (GenreModel)result.Data;
            // 登録後の処理
        }
    }
}
