@page "/phrases"
@attribute [Authorize]
@using MudBlazor
@using PhrazorApp.Models
@using PhrazorApp.Utils
@using System.Globalization
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Web

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject PhraseService PhraseService
@inject UiOperationRunner UiOperationRunner
@inject ReviewSession ReviewSession

<PageTitle>フレーズ一覧</PageTitle>

<MudStack Spacing="2">
    <SectionTitle Title="フレーズ一覧" />

    <!-- 上部アクション -->
    <ActionCard>
        <MudButton Variant="Variant.Outlined" Size="@BtnSize" Color="Color.Info"
                   StartIcon="@Icons.Material.TwoTone.Add"
                   OnClick="GoCreate">
            新規追加
        </MudButton>

        <MudButton Variant="Variant.Outlined" Size="@BtnSize" Color="Color.Default"
                   StartIcon="@Icons.Material.TwoTone.UploadFile"
                   OnClick="OpenCsvUploadDialog">
            CSV取込
        </MudButton>
    </ActionCard>

    <BaseCard>
        <!-- 検索条件 -->
        <MudCardHeader>
            <CardHeaderContent>
                <SectionTitle HeadingLevel="3" Title="検索条件" />
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent Class="pt-0">

            <!-- 主要条件（フレーズは常時表示。意味/ジャンルは md↑のみ常時表示） -->
            <MudGrid Spacing="2" Class="mb-2">
                <!-- フレーズ：常時表示 / Enter で検索 -->
                <MudItem xs="12" md="4">
                    <MudTextField T="string" Label="フレーズ" Variant="Variant.Outlined" Margin="Margin.Dense"
                                  @bind-Value="_qPhrase" Immediate="true" Clearable="true"
                                  OnKeyDown="OnSearchKeyDown"
                                  @key="_inputsVersion" />
                </MudItem>

                <!-- 意味・ジャンル：md↑のみ表示（Enter で検索をサポート） -->
                <MudHidden Breakpoint="@Breakpoint.SmAndDown">
                    <MudItem md="4">
                        <MudTextField T="string" Label="意味" Variant="Variant.Outlined" Margin="Margin.Dense"
                                      @bind-Value="_qMeaning" Immediate="true" Clearable="true"
                                      OnKeyDown="OnSearchKeyDown"
                                      @key="_inputsVersion" />
                    </MudItem>

                    <MudItem md="4">
                        <MudSelect T="string"
                                   Label="ジャンル（複数選択）"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"
                                   MultiSelection="true"
                                   Clearable="true"
                                   SelectedValues="_qCategories"
                                   SelectedValuesChanged="@((IEnumerable<string> vs) =>
                                       { _qCategories = vs?.ToHashSet(StringComparer.OrdinalIgnoreCase)
                                                          ?? new(StringComparer.OrdinalIgnoreCase);
                                         StateHasChanged();
                                       })">
                            @foreach (var opt in _categoryOptions)
                            {
                                <MudSelectItem T="string" Value="@opt">@opt</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudHidden>
            </MudGrid>

            <!-- 詳細条件＋検索/クリア -->
            <MudHidden Breakpoint="@Breakpoint.SmAndDown">
                <MudStack Row Spacing="1" AlignItems="@AlignItems.Center" Class="mt-1 mb-1">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="@BtnSize"
                               StartIcon="@Icons.Material.TwoTone.Search"
                               OnClick="@ApplyFilter">
                        検索
                    </MudButton>

                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Default"
                               Size="@BtnSize"
                               StartIcon="@Icons.Material.TwoTone.Clear"
                               OnClick="@ClearFilter">
                        クリア
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Default"
                               Size="@BtnSize"
                               StartIcon="@(_showAdvanced ? Icons.Material.Outlined.ExpandLess : Icons.Material.Outlined.ExpandMore)"
                               OnClick="@ToggleAdvanced">
                        詳細条件
                    </MudButton>

                    <MudSpacer />
                    <MudText Color="Color.Default">表示件数: @_filtered.Count</MudText>
                </MudStack>
            </MudHidden>

            <MudHidden Breakpoint="@Breakpoint.MdAndUp">
                <MudStack Spacing="1" AlignItems="@AlignItems.Stretch" Class="mt-1 mb-1">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="@BtnSize"
                               StartIcon="@Icons.Material.TwoTone.Search"
                               FullWidth="true"
                               OnClick="@ApplyFilter">
                        検索
                    </MudButton>

                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Default"
                               Size="@BtnSize"
                               StartIcon="@Icons.Material.TwoTone.Clear"
                               FullWidth="true"
                               OnClick="@ClearFilter">
                        クリア
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Default"
                               Size="@BtnSize"
                               StartIcon="@(_showAdvanced ? Icons.Material.Outlined.ExpandLess : Icons.Material.Outlined.ExpandMore)"
                               FullWidth="true"
                               OnClick="@ToggleAdvanced">
                        詳細条件
                    </MudButton>

                    <MudText Color="Color.Default">表示件数: @_filtered.Count</MudText>
                </MudStack>
            </MudHidden>

            <!-- 詳細条件（折りたたみ） -->
            <MudCollapse Expanded="@_showAdvanced" Class="mt-2">
                <!-- sm↓では「意味」「ジャンル」をここに収納 -->
                <MudHidden Breakpoint="@Breakpoint.MdAndUp">
                    <MudGrid Spacing="2" Class="mb-2">
                        <MudItem xs="12">
                            <MudTextField T="string" Label="意味" Variant="Variant.Outlined" Margin="Margin.Dense"
                                          @bind-Value="_qMeaning" Clearable="true"
                                          OnKeyDown="OnSearchKeyDown"
                                          @key="_inputsVersion" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect T="string"
                                       Label="ジャンル（複数選択）"
                                       Variant="Variant.Outlined"
                                       Margin="Margin.Dense"
                                       MultiSelection="true"
                                       Clearable="true"
                                       SelectedValues="_qCategories"
                                       SelectedValuesChanged="@((IEnumerable<string> vs) =>
                                           { _qCategories = vs?.ToHashSet(StringComparer.OrdinalIgnoreCase)
                                                              ?? new(StringComparer.OrdinalIgnoreCase);
                                             StateHasChanged();
                                           })">
                                @foreach (var opt in _categoryOptions)
                                {
                                    <MudSelectItem T="string" Value="@opt">@opt</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudHidden>

                <!-- 既存の詳細条件 -->
                <MudGrid Spacing="2">
                    <MudItem xs="12" md="4">
                        <MudSelect T="string"
                                   Label="フレーズ帳（複数選択）"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"
                                   MultiSelection="true"
                                   Clearable="true"
                                   SelectedValues="_qPhraseBooks"
                                   SelectedValuesChanged="@( (IEnumerable<string> vs) =>
                                       { _qPhraseBooks = vs?.ToHashSet(StringComparer.OrdinalIgnoreCase)
                                                          ?? new(StringComparer.OrdinalIgnoreCase);
                                         StateHasChanged();
                                       })">
                            @foreach (var opt in _phraseBookOptions)
                            {
                                <MudSelectItem T="string" Value="@opt">@opt</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudDateRangePicker Label="作成日（範囲）"
                                            @bind-DateRange="_qCreatedRange"
                                            Culture="_ja"
                                            DateFormat="yyyy/MM/dd"
                                            Variant="Variant.Outlined"
                                            Margin="Margin.Dense"
                                            Clearable="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudStack Row Spacing="1" AlignItems="AlignItems.End">
                            <MudNumericField T="int?" Label="復習回数(開始)" Variant="Variant.Outlined" Margin="Margin.Dense" Min="0" Step="1"
                                             InputMode="InputMode.numeric"
                                             @bind-Value="_qReviewMin" Clearable="true"
                                             OnKeyDown="OnSearchKeyDown"
                                             Style="min-width:120px;" />
                            <MudText Class="pb-2">〜</MudText>
                            <MudNumericField T="int?" Label="復習回数(終了)" Variant="Variant.Outlined" Margin="Margin.Dense" Min="0" Step="1"
                                             InputMode="InputMode.numeric"
                                             @bind-Value="_qReviewMax" Clearable="true"
                                             OnKeyDown="OnSearchKeyDown"
                                             Style="min-width:120px;" />
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudCollapse>

        </MudCardContent>

        <MudDivider />

        <SelectableTable TItem="PhraseListItemModel"
                         @ref="_table"
                         Items="_filtered"
                         IdSelector="@(x => x.Id)"
                         Title=""
                         Search="false"
                         Pager="TablePagerMode.Auto"
                         RowsPerPage="@_rowsPerPage"
                         Height="500px">

            <!-- ツールバー（ページ側で差し込み） -->
            <ExtraToolbar Context="tb">
                @{
                    var selView = tb.SelectedCountInView;
                    var selAll  = tb.GetSelectedIdsAll()?.Count ?? 0;
                    var hasAnyAll  = selAll > 0;
                }

                @if (tb.IsMdUp)
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="@BtnSize"
                               StartIcon="@Icons.Material.TwoTone.PlayArrow"
                               Disabled="@(selView == 0)"
                               OnClick="@(() => StartTest(tb.GetSelectedIdsInView()))">
                        テスト開始
                    </MudButton>

                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="@BtnSize"
                               StartIcon="@Icons.Material.TwoTone.PlayArrow"
                               Disabled="@(selAll == 0)"
                               OnClick="@(() => StartReviewSelected(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                        フレーズ復習
                    </MudButton>

                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Info"
                               Size="@BtnSize"
                               StartIcon="@Icons.Material.TwoTone.Bookmarks"
                               Disabled="@(selAll == 0)"
                               OnClick="@(() => OpenBulkPhrasebookDialog(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                        フレーズ帳一括設定
                    </MudButton>

                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Info"
                               Size="@BtnSize"
                               StartIcon="@Icons.Material.TwoTone.Label"
                               Disabled="@(selAll == 0)"
                               OnClick="@(() => OpenBulkGenreDialog(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                        ジャンルー一括設定
                    </MudButton>


                    <MudBadge Content="@selAll"
                              Max="99999"
                              Overlap
                              Bordered
                              Origin="Origin.TopRight">
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Error"
                                   Size="@BtnSize"
                                   StartIcon="@Icons.Material.TwoTone.Delete"
                                   Disabled="@(selAll == 0)"
                                   OnClick="@(async () => await OnBulkDeleteRequested(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                            一括削除
                        </MudButton>
                    </MudBadge>

                    <MudSpacer />
                }
                else
                {
                    <MudStack Row Spacing="1" AlignItems="@AlignItems.Center" Style="width:100%">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="@BtnSize"
                                   StartIcon="@Icons.Material.TwoTone.PlayArrow"
                                   FullWidth="true"
                                   Disabled="@(selView == 0)"
                                   OnClick="@(() => StartTest(tb.GetSelectedIdsInView()))">
                            テスト開始
                        </MudButton>

                        <MudMenu Dense="true" OffsetY="true">
                            <ActivatorContent>
                                <MudBadge Content="@selAll"
                                          Max="99999"
                                          Overlap
                                          Bordered
                                          Origin="Origin.TopRight">
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Default"
                                               Size="@BtnSize"
                                               StartIcon="@Icons.Material.TwoTone.MoreHoriz">
                                        その他
                                    </MudButton>
                                </MudBadge>
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem Disabled="@(selAll == 0)"
                                             OnClick="@(() => StartReviewSelected(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                                    <MudIcon Icon="@Icons.Material.TwoTone.PlayArrow"
                                             Color="@(hasAnyAll ? Color.Primary : Color.Default)" Class="mr-2" />
                                    フレーズ復習
                                </MudMenuItem>

                                
                                <MudMenuItem Disabled="@(selAll == 0)"
                                             OnClick="@(() => OpenBulkPhrasebookDialog(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                                    <MudIcon Icon="@Icons.Material.TwoTone.Bookmarks"
                                             Color="@(hasAnyAll ? Color.Secondary : Color.Default)" Class="mr-2" />
                                    フレーズ帳一括設定
                                </MudMenuItem>

                                <MudMenuItem Disabled="@(selAll == 0)"
                                             OnClick="@(() => OpenBulkGenreDialog(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                                    <MudIcon Icon="@Icons.Material.TwoTone.Label"
                                             Color="@(hasAnyAll ? Color.Info : Color.Default)" Class="mr-2" />
                                    ジャンル一括設定
                                </MudMenuItem>


                                <MudMenuItem Disabled="@(selAll == 0)"
                                             OnClick="@(async () => await OnBulkDeleteRequested(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                                    <MudIcon Icon="@Icons.Material.TwoTone.Delete"
                                             Color="@(hasAnyAll ? Color.Error : Color.Default)" Class="mr-2" />
                                    一括削除
                                </MudMenuItem>
                            </ChildContent>
                        </MudMenu>
                    </MudStack>
                }
            </ExtraToolbar>

            <!-- Header -->
            <HeaderContent>
                <MudTh>フレーズ</MudTh>

                <!-- ★ 追加：フレーズ帳列（ジャンルの左） -->
                <MudHidden Breakpoint="@Breakpoint.SmAndDown">
                    <MudTh style="min-width:180px;">フレーズ帳</MudTh>
                    <MudTh style="min-width:180px;">ジャンル</MudTh>
                </MudHidden>

                <MudTh style="min-width:120px;">操作</MudTh>
            </HeaderContent>

            <!-- Rows -->
            <RowTemplate Context="x">
                <MudTd>
                    <MudStack Spacing="1">
                        <MudStack Row AlignItems="@AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.subtitle1" Style="font-weight:600;">@x.Phrase</MudText>
                        </MudStack>
                        <MudText Typo="Typo.subtitle1">@x.Meaning</MudText>

                        <!-- 960px以下はフレーズ下段にフレーズ帳とジャンルを要約表示 -->
                        <MudHidden Breakpoint="@Breakpoint.SmAndUp">
                            <MudStack Row Wrap="@Wrap.Wrap" Spacing="1" Class="mt-1">
                                <!-- フレーズ帳 -->
                                @if (x.PhraseBookNames?.Count > 0)
                                {
                                    @foreach (var name in x.PhraseBookNames.Take(3))
                                    {
                                        <MudChip T="string" Size="Size.Small" Variant="Variant.Filled" Class="mr-1 mb-1">@StringUtil.Truncate(name)</MudChip>
                                    }
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">—</MudText>
                                }
                            </MudStack>
                            <MudStack Row Wrap="@Wrap.Wrap" Spacing="1" Class="mt-1">
                                <!-- ジャンル/サブジャンル -->
                                @if (x.SelectedDropItems?.Count > 0)
                                {
                                    @foreach (var c in x.SelectedDropItems.Take(3))
                                    {
                                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" Class="mr-1 mb-1">@StringUtil.Truncate(FormatGenreLabel(c))</MudChip>
                                    }
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">—</MudText>
                                }
                            </MudStack>
                        </MudHidden>
                    </MudStack>
                </MudTd>

                <!-- md↑：フレーズ帳列 → ジャンル列 -->
                <MudHidden Breakpoint="@Breakpoint.SmAndDown">
                    <MudTd>
                        @if (x.PhraseBookNames?.Count > 0)
                        {
                            <MudStack Row Wrap="@Wrap.Wrap" Spacing="1">
                                @foreach (var name in x.PhraseBookNames)
                                {
                                    <MudChip T="string" Variant="Variant.Filled" Size="Size.Small">@StringUtil.Truncate(name)</MudChip>
                                }
                            </MudStack>
                        }
                        else
                        {
                            <MudText Color="Color.Secondary">—</MudText>
                        }
                    </MudTd>

                    <MudTd>
                        @if (x.SelectedDropItems?.Count > 0)
                        {
                            <MudStack Row Wrap="@Wrap.Wrap" Spacing="1">
                                @foreach (var c in x.SelectedDropItems)
                                {
                                    <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small">@StringUtil.Truncate(FormatGenreLabel(c))</MudChip>
                                }
                            </MudStack>
                        }
                        else
                        {
                            <MudText Color="Color.Secondary">—</MudText>
                        }
                    </MudTd>
                </MudHidden>

                <MudTd Align="Align.Right" style="min-width:120px;">
                    <!-- md以上：アイコンボタン -->
                    <MudHidden Breakpoint="@Breakpoint.SmAndDown">
                        <MudStack Row>
                            <MudTooltip Text="編集"><MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.TwoTone.Edit" Color="Color.Info"  AriaLabel="編集" OnClick="@(() => GoEdit(x.Id))" /></MudTooltip>
                            <MudTooltip Text="削除"><MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.TwoTone.Delete" Color="Color.Error"  AriaLabel="削除" OnClick="@(() => OnDeleteButtonClickedAsync(x))" /></MudTooltip>
                        </MudStack>
                    </MudHidden>

                    <!-- sm以下：テキストボタン / xsはメニュー -->
                    <MudHidden Breakpoint="@Breakpoint.MdAndUp">
                        <MudStack Row>
                            <MudButton Variant="Variant.Outlined" Size="@BtnSize" Color="Color.Info"
                                       StartIcon="@Icons.Material.TwoTone.Edit"
                                       OnClick="@(() => GoEdit(x.Id))">
                                編集
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Size="@BtnSize" Color="Color.Error"
                                       StartIcon="@Icons.Material.TwoTone.Delete"
                                       OnClick="@(() => OnDeleteButtonClickedAsync(x))">
                                削除
                            </MudButton>
                        </MudStack>
                    </MudHidden>

                </MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText Class="p-4">データがありません。</MudText>
            </NoRecordsContent>
        </SelectableTable>
    </BaseCard>
</MudStack>

@code {
    private const Size BtnSize = Size.Small; // このページは Small を採用

    private readonly CultureInfo _ja = new("ja-JP");
    private SelectableTable<PhraseListItemModel>? _table;

    // 入力再マウント用キー
    private int _inputsVersion;

    // 全件 & フィルタ後
    private List<PhraseListItemModel> Elements = new();
    private List<PhraseListItemModel> _filtered = new();

    // ページャ
    private int _rowsPerPage = 10;

    // 検索モデル
    private string? _qPhrase;
    private string? _qMeaning;
    private int? _qReviewMin;
    private int? _qReviewMax;
    private DateRange? _qCreatedRange;

    // ジャンル（候補 & 選択）
    private List<string> _categoryOptions = new();
    private HashSet<string> _qCategories = new(StringComparer.OrdinalIgnoreCase);

    // フレーズ帳（候補 & 選択）
    private List<string> _phraseBookOptions = new();
    private HashSet<string> _qPhraseBooks = new(StringComparer.OrdinalIgnoreCase);

    // 詳細条件の開閉
    private bool _showAdvanced = false;
    private void ToggleAdvanced() => _showAdvanced = !_showAdvanced;

    protected override async Task OnInitializedAsync()
    {
        var data = await UiOperationRunner.ReadWithOverlayAsync(
            () => PhraseService.GetPhraseListAsync(),
            message: AppMessages.MSG_I_PROGRESS_READ
        );
        if (data is not null)
        {
            Elements = data;

            // 既定：直近1か月
            _qCreatedRange = new DateRange(DateTime.Today.AddMonths(-1), DateTime.Today);

            RebuildCategoryOptions();
            RebuildPhraseBookOptions();
            ApplyFilter();
        }
    }

    // Enterキーで検索（site.jsのフォーカス移動はそのまま許容）
    private void OnSearchKeyDown(KeyboardEventArgs e)
    {
        if (e?.Key == "Enter")
        {
            ApplyFilter();
        }
    }

    private void ApplyFilter()
    {
        IEnumerable<PhraseListItemModel> q = Elements;

        // フレーズ / 意味
        if (!string.IsNullOrWhiteSpace(_qPhrase))
            q = q.Where(x => (x.Phrase ?? "").Contains(_qPhrase.Trim(), StringComparison.OrdinalIgnoreCase));
        if (!string.IsNullOrWhiteSpace(_qMeaning))
            q = q.Where(x => (x.Meaning ?? "").Contains(_qMeaning.Trim(), StringComparison.OrdinalIgnoreCase));

        // ジャンル（OR マッチ）
        if (_qCategories.Any())
        {
            q = q.Where(x =>
                (x.SelectedDropItems?.Any() ?? false) &&
                x.SelectedDropItems.Any(di =>
                {
                    var label = FormatGenreLabel(di);               // 「親/子」形式へ
                    return !string.IsNullOrWhiteSpace(label)
                           && _qCategories.Contains(label);
                })
            );
        }

        // フレーズ帳（OR マッチ）
        if (_qPhraseBooks.Any())
        {
            q = q.Where(x => x.PhraseBookNames != null
                             && x.PhraseBookNames.Any(n => !string.IsNullOrWhiteSpace(n)
                                                           && _qPhraseBooks.Contains(n)));
        }

        // 復習回数：範囲正規化
        int? min = _qReviewMin, max = _qReviewMax;
        if (min.HasValue && max.HasValue && min > max) (min, max) = (max, min);
        if (min.HasValue) q = q.Where(x => x.ReviewCount >= min.Value);
        if (max.HasValue) q = q.Where(x => x.ReviewCount <= max.Value);

        // 作成日時（両端含む）
        var from = _qCreatedRange?.Start?.Date;
        var to   = _qCreatedRange?.End?.Date;
        if (from.HasValue) q = q.Where(x => x.CreatedAt.HasValue && x.CreatedAt.Value.Date >= from.Value);
        if (to.HasValue)   q = q.Where(x => x.CreatedAt.HasValue && x.CreatedAt.Value.Date <= to.Value);

        _filtered = q.ToList();
        StateHasChanged();
    }

    private void ClearFilter()
    {
        // 文字条件
        _qPhrase  = null;
        _qMeaning = null;

        // 複数選択は参照入替
        _qCategories  = new(StringComparer.OrdinalIgnoreCase);
        _qPhraseBooks = new(StringComparer.OrdinalIgnoreCase);

        // 数値条件
        _qReviewMin = null;
        _qReviewMax = null;

        // 日付（仕様に合わせて：直近1か月へ戻す）
        _qCreatedRange = new DateRange(DateTime.Today.AddMonths(-1), DateTime.Today);

        // 詳細条件は閉じる
        _showAdvanced = false;

        // ★ 入力を再マウントして内部テキストも確実にリセット
        _inputsVersion++;

        ApplyFilter();
    }

    private void RebuildCategoryOptions()
    {
        _categoryOptions = Elements
            .Where(e => e.SelectedDropItems is not null)
            .SelectMany(e => e.SelectedDropItems!)
            .Select(di => FormatGenreLabel(di))                 
            .Where(label => !string.IsNullOrWhiteSpace(label))
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(label => label)
            .ToList();
    }

    private void RebuildPhraseBookOptions()
    {
        _phraseBookOptions = Elements
            .Where(e => e.PhraseBookNames is not null)
            .SelectMany(e => e.PhraseBookNames!
            )
            .Where(n => !string.IsNullOrWhiteSpace(n))
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(n => n)
            .ToList();
    }

    // 表示用：ジャンル/サブジャンル 形式に整形
    private static string FormatGenreLabel(DropItemModel? di)
        => (di is null || string.IsNullOrWhiteSpace(di.Name))
            ? ""
            : string.IsNullOrWhiteSpace(di.ParentName) ? di.Name! : $"{di.ParentName}/{di.Name}";

    private static string? TryGetStringProp(object obj, string prop)
        => obj.GetType().GetProperty(prop)?.GetValue(obj) as string;

    // --- Toolbar actions ---
    private void GoCreate() => NavigationManager.NavigateTo("/phrases/create");
    private void GoEdit(Guid id) => NavigationManager.NavigateTo($"/phrases/edit/{id}");

    private void StartTest(HashSet<Guid> idsInView)
    {
        if (idsInView.Count == 0)
        {
            Snackbar.Add("テスト対象が選択されていません。", Severity.Warning);
            return;
        }
        var selected = _filtered.Where(x => idsInView.Contains(x.Id)).ToList();
        if (selected.Count == 0)
        {
            Snackbar.Add("選択に一致する項目が見つかりません。", Severity.Warning);
            return;
        }
        ReviewSession.Set(selected, x => x.Id, x => x.Phrase, x => x.Meaning);
        NavigationManager.NavigateTo("/phrases/writing?from=list");
    }

    private void StartReviewSelected(HashSet<Guid> selectedIds)
    {
        if (selectedIds.Count == 0)
        {
            Snackbar.Add("復習対象が選択されていません。", Severity.Warning);
            return;
        }
        var selected = _filtered.Where(x => selectedIds.Contains(x.Id)).ToList();
        if (selected.Count == 0)
        {
            Snackbar.Add("選択に一致する項目が見つかりません。", Severity.Warning);
            return;
        }
        ReviewSession.Set(selected, x => x.Phrase, x => x.Meaning);
        NavigationManager.NavigateTo("/phrases/review");
    }

    private async Task OpenCsvUploadDialog()
    {
        await DialogService.ShowCsvUploadDialogAsync<PhraseImportDto>(
            caller: this,
            onUploadCompleted: OnCsvUploadCompleted,
            schema: CsvSchemas.PhraseImport,
            processAsync: async rows =>
            {
                var models = rows.Select(x => x.ToPhraseModel()).ToList();
                return await PhraseService.CreatePhrasesAsync(models);
            });
    }

    private async Task OnCsvUploadCompleted(List<PhraseImportDto> _)
    {
        var list = await UiOperationRunner.ReadAsync(() => PhraseService.GetPhraseListAsync());
        if (list is not null)
        {
            Elements = list;
            RebuildCategoryOptions();
            RebuildPhraseBookOptions();
            _qCreatedRange = new DateRange(DateTime.Today.AddMonths(-1), DateTime.Today);
            ApplyFilter();
        }
        Snackbar.Add(AppMessages.MSG_I_SUCCESS_CSV_TAKE_IN, Severity.Success);
    }

    private async Task OnBulkDeleteRequested(HashSet<Guid> ids)
    {
        if (ids is null || ids.Count == 0)
        {
            Snackbar.Add("削除対象が選択されていません。", Severity.Warning);
            return;
        }

        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.DangerConfirm,
            $"選択中 {ids.Count} 件を削除します。よろしいですか？");
        if (!ok) return;

        var list = await UiOperationRunner.WriteThenReloadAsync(
            operation: () => PhraseService.DeletePhrasesAsync(ids),
            reloadData: () => PhraseService.GetPhraseListAsync(),
            message: AppMessages.MSG_I_PROGRESS_DELETE
        );

        if (list is not null)
        {
            Elements = list;
            RebuildCategoryOptions();
            RebuildPhraseBookOptions();
            _qCreatedRange = new DateRange(DateTime.Today.AddMonths(-1), DateTime.Today);
            ApplyFilter();
        }
    }

    private async Task OpenBulkGenreDialog(HashSet<Guid> ids)
    {
        if (ids.Count == 0)
        {
            Snackbar.Add("対象が選択されていません。", Severity.Warning);
            return;
        }

        await DialogService.ShowWithParamsAndCallbackAsync<BulkSetGenresDialog, bool>(
            title: "ジャンル一括設定",
            caller: this,
            values: new (Expression<Func<BulkSetGenresDialog, object?>>, object?)[] {
                (x => x.TargetIds, ids)
            },
            callbackSelector: x => x.OnApplied,
            handler: async _ =>
            {
                var list = await UiOperationRunner.ReadAsync(() => PhraseService.GetPhraseListAsync());
                if (list is not null)
                {
                    Elements = list;
                    RebuildCategoryOptions();
                    RebuildPhraseBookOptions();
                    _qCreatedRange = new DateRange(DateTime.Today.AddMonths(-1), DateTime.Today);
                }
                _qCreatedRange = new DateRange(DateTime.Today.AddMonths(-1), DateTime.Today);
                ApplyFilter();

            },
            options: DialogServiceExtensions.OptionsSm()
        );
    }

    private async Task OpenBulkPhrasebookDialog(HashSet<Guid> ids)
    {
        if (ids.Count == 0)
        {
            Snackbar.Add("対象が選択されていません。", Severity.Warning);
            return;
        }

        await DialogService.ShowWithParamsAndCallbackAsync<BulkAddToPhrasebookDialog, bool>(
            title: "フレーズ帳一括設定",
            caller: this,
            values: new (Expression<Func<BulkAddToPhrasebookDialog, object?>>, object?)[] {
                (x => x.TargetIds, ids)
            },
            callbackSelector: x => x.OnApplied,
            handler: async _ =>
            {
                var list = await UiOperationRunner.ReadAsync(() => PhraseService.GetPhraseListAsync());
                if (list is not null)
                {
                    Elements = list;
                    RebuildCategoryOptions();
                    RebuildPhraseBookOptions();
                    _qCreatedRange = new DateRange(DateTime.Today.AddMonths(-1), DateTime.Today);
                    ApplyFilter();
                }
            },
            options: DialogServiceExtensions.OptionsSm()
        );
    }

    // 個別削除
    private async Task OnDeleteButtonClickedAsync(PhraseListItemModel item)
    {
        var suffix = item.Phrase.Length > 50 ? "..." : "";
        var targetPhrase = $"{item.Phrase.Substring(0, Math.Min(item.Phrase.Length, 50))}{suffix}";

        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.DangerConfirm,
            string.Format(AppMessages.MSG_I_CONFIRM_DELETE, targetPhrase));
        if (!ok) return;

        var list = await UiOperationRunner.WriteThenReloadAsync(
            operation: () => PhraseService.DeletePhraseAsync(item.Id),
            reloadData: () => PhraseService.GetPhraseListAsync(),
            message: AppMessages.MSG_I_PROGRESS_DELETE
        );

        if (list is not null)
        {
            Elements = list;
            RebuildCategoryOptions();
            RebuildPhraseBookOptions();
            _qCreatedRange = new DateRange(DateTime.Today.AddMonths(-1), DateTime.Today);
            ApplyFilter();
        }
    }
}
