@page "/phrases"
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject PhraseService PhraseService
@inject UiOperationRunner UiOperationRunner

<MudStack Spacing="2">
    <SectionTitle Title="フレーズ一覧" />

    <!-- 上部アクション -->
    <ActionCard>
        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Info"
                   StartIcon="@Icons.Material.TwoTone.Add"
                   OnClick="GoCreate">
            新規追加
        </MudButton>

        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Default"
                   StartIcon="@Icons.Material.TwoTone.UploadFile"
                   OnClick="OpenCsvUploadDialog">
            CSV読込
        </MudButton>
    </ActionCard>

    <BaseCard>
        <!-- 汎用テーブル（ツールバー＋表本体を内包） -->
        <SelectableTable TItem="PhraseModel"
                         Items="Elements"
                         IdSelector="@(x => x.Id)"
                         @bind-SearchText="searchString"
                         Filter="@( (PhraseModel e, string s) =>
                                             string.IsNullOrWhiteSpace(s)
                                             || e.Phrase.Contains(s, StringComparison.OrdinalIgnoreCase)
                                             || e.Meaning.Contains(s, StringComparison.OrdinalIgnoreCase) )"
                         @bind-Page="Page"
                         RowsPerPage="@_rowsPerPage"
                         SelectedIds="SelectedIds"
                         SelectedIdsChanged="@(ids => SelectedIds = ids)"
                         OnBulkDelete="OnBulkDeleteRequested"
                         BulkDeleteLabel="@AppConstants.LABEL_BUTTON_BULK_DELETE"
                         MobileSelectAllLabel="全選択（検索結果）"
                         Height="500px">

            <HeaderCells>
                <MudTh>フレーズ</MudTh>
                <MudTh style="min-width:200px;">操作</MudTh>
            </HeaderCells>

            <RowCells Context="x">
                <MudTd>
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.subtitle1" Style="font-weight:600;">@x.Phrase</MudText>
                        <MudText Typo="Typo.subtitle1">@x.Meaning</MudText>
                    </MudStack>
                </MudTd>
                <MudTd Align="Align.Right" style="min-width:200px;">
                    <MudStack Row>
                        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Info"
                                   StartIcon="@Icons.Material.TwoTone.Edit"
                                   OnClick="@(() => GoEdit(x.Id))">
                            @AppConstants.LABEL_BUTTON_EDIT
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error"
                                   StartIcon="@Icons.Material.TwoTone.Delete"
                                   OnClick="@(() => OnDeleteButtonClickedAsync(x))">
                            @AppConstants.LABEL_BUTTON_DELETE
                        </MudButton>
                    </MudStack>
                </MudTd>
            </RowCells>

            <!-- ★ ツールバーに“テスト開始”を追加 -->
            <ToolbarContent Context="tb">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.TwoTone.PlayArrow"
                           Disabled="@(tb.SelectedCountInView == 0)"
                           FullWidth="@(!tb.IsMdUp)"
                           OnClick="@(() => StartTest(tb.GetSelectedIdsInView?.Invoke() ?? new HashSet<Guid>()))">
                    テスト開始
                </MudButton>
            </ToolbarContent>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </SelectableTable>

    </BaseCard>
</MudStack>

@code {
    // データ
    private List<PhraseModel> Elements = new();

    // 検索（SelectableTable から @bind で更新される）
    private string searchString = "";

    // ページング
    private int Page;
    private int _rowsPerPage = 10;

    // 選択されたID（SelectableTable と双方向バインド）
    private HashSet<Guid> SelectedIds = new();

    // 初期表示：読み取りは空メッセージ運用（Snackbarなし）
    protected override async Task OnInitializedAsync()
    {
        var r = await UiOperationRunner.RunAsync(
            ct => PhraseService.GetPhraseViewModelListAsync(ct),
            runningMessage: "読込中...",
            showCancel: false
        );
        if (r.IsSuccess && r.Data is not null)
            Elements = r.Data;
    }

    private async Task StartTest(HashSet<Guid> idsInView)
    {
        if (idsInView.Count == 0)
        {
            Snackbar.Add("テスト対象が選択されていません。", Severity.Warning);
            return;
        }

        // ここでテスト用の画面へ遷移／ダイアログ起動など
        // 例: NavigationManager.NavigateTo($"/phrases/test?ids={string.Join(',', idsInView)}");
        Snackbar.Add($"テスト開始: {idsInView.Count} 件", Severity.Info);
    }

    // 一括削除（SelectableTable からコールバック）
    private async Task OnBulkDeleteRequested(HashSet<Guid> ids)
    {
        if (ids is null || ids.Count == 0)
        {
            Snackbar.Add("削除対象が選択されていません。", Severity.Warning);
            return;
        }

        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.DeleteConfirm,
            $"選択中 {ids.Count} 件を削除します。よろしいですか？");
        if (!ok) return;

        var list = await UiOperationRunner.RunThenLoadAsync(
            doOperation: ct => PhraseService.DeletePhrasesAsync(ids, ct),           // 非ジェネリック
            loadData: ct => PhraseService.GetPhraseViewModelListAsync(ct),        // ジェネリック（型はここから推論）
            runningMessage: "削除中...",
            showCancel: true
        );

        if (list is not null)
        {
            SelectedIds.Clear();
            Elements = list;
        }
    }
    // 個別削除
    private async Task OnDeleteButtonClickedAsync(PhraseModel item)
    {
        var suffix = item.Phrase.Length > 50 ? "..." : "";
        var targetPhrase = $"{item.Phrase.Substring(0, Math.Min(item.Phrase.Length, 50))}{suffix}";

        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.DeleteConfirm,
            string.Format(AppMessages.MSG_I_CONFIRM_DELETE, targetPhrase));
        if (!ok) return;

        // 削除 → 一覧再読込（<>不要）
        var list = await UiOperationRunner.RunThenLoadAsync(
            doOperation: ct => PhraseService.DeletePhraseAsync(item.Id, ct),    
            loadData: ct => PhraseService.GetPhraseViewModelListAsync(ct),   
            runningMessage: "削除中...",
            showCancel: true
        );

        if (list is not null)
            Elements = list;
    }

    // CSV 読み込み
    private async Task OpenCsvUploadDialog()
    {
        await DialogService.ShowCsvUploadDialogAsync<DialogCsvUpload, PhraseModel>(
            this,
            OnCsvUploadCompleted
        );
    }

    private async Task OnCsvUploadCompleted(List<PhraseModel> importedPhrases)
    {
        if (importedPhrases is null || importedPhrases.Count == 0) return;

        // 取込 → 一覧再読込（<>不要）
        var list = await UiOperationRunner.RunThenLoadAsync(
            doOperation: ct => PhraseService.CreatePhrasesAsync(importedPhrases, ct),
            loadData: ct => PhraseService.GetPhraseViewModelListAsync(ct),
            runningMessage: "取込中...",
            timeout: TimeSpan.FromMinutes(2),
            showCancel: true
        );

        if (list is not null)
            Elements = list;
    }
    // ナビ
    private void GoCreate() => NavigationManager.NavigateTo("/phrases/create");
    private void GoEdit(Guid id) => NavigationManager.NavigateTo($"/phrases/edit/{id}");
}
