@page "/phrases"
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject PhraseService PhraseService
@inject UiOperationRunner UiOperationRunner
@inject ReviewSession ReviewSession

<MudStack Spacing="2">
    <SectionTitle Title="フレーズ一覧" />

    <!-- 上部アクション -->
    <ActionCard>
        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Info"
                   StartIcon="@Icons.Material.TwoTone.Add"
                   OnClick="GoCreate">
            新規追加
        </MudButton>

        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Default"
                   StartIcon="@Icons.Material.TwoTone.UploadFile"
                   OnClick="OpenCsvUploadDialog">
            CSV読込
        </MudButton>
    </ActionCard>

    <BaseCard>
        <!-- シンプル版 SelectableTable -->
        <SelectableTable TItem="PhraseModel"
                         Items="Elements"
                         IdSelector="@(x => x.Id)"
                         Title="フレーズ一覧"
                         Search="true"
                         SearchPlaceholder="検索"
                         SearchBy="@(x => new[] { x.Phrase ?? string.Empty, x.Meaning ?? string.Empty })"
                         Pager="TablePagerMode.Auto"
                         RowsPerPage="@_rowsPerPage"
                         Height="500px"
                         OnBulkDelete="OnBulkDeleteRequested"
                         BulkDeleteLabel="@AppConstants.LABEL_BUTTON_BULK_DELETE"
                         MobileSelectAllLabel="全選択（検索結果）">

            <HeaderContent>
                <MudTh>フレーズ</MudTh>
                <MudTh style="min-width:200px;">操作</MudTh>
            </HeaderContent>

            <RowTemplate Context="x">
                <MudTd>
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.subtitle1" Style="font-weight:600;">@x.Phrase</MudText>
                        <MudText Typo="Typo.subtitle1">@x.Meaning</MudText>
                    </MudStack>
                </MudTd>
                <MudTd Align="Align.Right" style="min-width:200px;">
                    <MudStack Row>
                        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Info"
                                   StartIcon="@Icons.Material.TwoTone.Edit"
                                   OnClick="@(() => GoEdit(x.Id))">
                            @AppConstants.LABEL_BUTTON_EDIT
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error"
                                   StartIcon="@Icons.Material.TwoTone.Delete"
                                   OnClick="@(() => OnDeleteButtonClickedAsync(x))">
                            @AppConstants.LABEL_BUTTON_DELETE
                        </MudButton>
                    </MudStack>
                </MudTd>
            </RowTemplate>

            <!-- ツールバー拡張（テスト開始/選択して復習） -->
            <ExtraToolbar Context="tb">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.TwoTone.PlayArrow"
                           Disabled="@(tb.SelectedCountInView == 0)"
                           FullWidth="@(!tb.IsMdUp)"
                           OnClick="@(() => StartTest(tb.GetSelectedIdsInView().ToHashSet()))">
                    テスト開始
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.TwoTone.PlayArrow"
                           Disabled="@(((tb.GetSelectedIdsAll()?.Count) ?? 0) == 0)"
                           FullWidth="@(!tb.IsMdUp)"
                           OnClick="@(() => StartReviewSelected(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                    選択して復習
                </MudButton>
            </ExtraToolbar>

            <NoRecordsContent>
                <MudText Class="p-4">データがありません。</MudText>
            </NoRecordsContent>
        </SelectableTable>
    </BaseCard>
</MudStack>

@code {
    // データ
    private List<PhraseModel> Elements = new();

    // 1ページ表示件数
    private int _rowsPerPage = 10;

    // 初期表示：一覧読込
    protected override async Task OnInitializedAsync()
    {
        var data = await UiOperationRunner.ReadWithOverlayAsync(
            () => PhraseService.GetPhraseViewModelListAsync(),
            message: AppMessages.MSG_I_PROGRESS_READ
        );

        if (data is not null)
        {
            Elements = data;
        }
    }

    private async Task StartTest(HashSet<Guid> idsInView)
    {
        if (idsInView.Count == 0)
        {
            Snackbar.Add("テスト対象が選択されていません。", Severity.Warning);
            return;
        }
        Snackbar.Add($"テスト開始: {idsInView.Count} 件", Severity.Info);
        // 例：NavigationManager.NavigateTo($"/phrases/test?ids={string.Join(',', idsInView)}");
    }

    // 一括削除（SelectableTable から受け取る）
    private async Task OnBulkDeleteRequested(HashSet<Guid> ids)
    {
        if (ids is null || ids.Count == 0)
        {
            Snackbar.Add("削除対象が選択されていません。", Severity.Warning);
            return;
        }

        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.DeleteConfirm,
            $"選択中 {ids.Count} 件を削除します。よろしいですか？");
        if (!ok) return;

        var list = await UiOperationRunner.WriteThenReloadAsync(
            operation: () => PhraseService.DeletePhrasesAsync(ids),          
            reloadData: () => PhraseService.GetPhraseViewModelListAsync(),
            message: AppMessages.MSG_I_PROGRESS_DELETE
        );

        if (list is not null)
            Elements = list;
    }

    // 個別削除
    private async Task OnDeleteButtonClickedAsync(PhraseModel item)
    {
        var suffix = item.Phrase.Length > 50 ? "..." : "";
        var targetPhrase = $"{item.Phrase.Substring(0, Math.Min(item.Phrase.Length, 50))}{suffix}";

        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.DeleteConfirm,
            string.Format(AppMessages.MSG_I_CONFIRM_DELETE, targetPhrase));
        if (!ok) return;

        var list = await UiOperationRunner.WriteThenReloadAsync(
            operation: () => PhraseService.DeletePhraseAsync(item.Id),       
            reloadData: () => PhraseService.GetPhraseViewModelListAsync(),
            message: AppMessages.MSG_I_PROGRESS_DELETE
        );

        if (list is not null)
            Elements = list;
    }

    // CSV 読み込み
    private async Task OpenCsvUploadDialog()
    {
        await DialogService.ShowCsvUploadDialogAsync<DialogCsvUpload, PhraseModel>(
            this,
            OnCsvUploadCompleted
        );
    }

    private async Task OnCsvUploadCompleted(List<PhraseModel> importedPhrases)
    {
        if (importedPhrases is null || importedPhrases.Count == 0) return;
        Elements = importedPhrases;
    }

    // ▼ 選択して復習（全選択セットを受け取る）
    private void StartReviewSelected(HashSet<Guid> selectedIds)
    {
        if (selectedIds.Count == 0)
        {
            Snackbar.Add("復習対象が選択されていません。", Severity.Warning);
            return;
        }

        var selected = Elements.Where(x => selectedIds.Contains(x.Id)).ToList();
        if (selected.Count == 0)
        {
            Snackbar.Add("選択に一致する項目が見つかりません。", Severity.Warning);
            return;
        }

        // 表＝英語( Phrase )、裏＝日本語( Meaning )
        ReviewSession.Set(selected, x => x.Phrase, x => x.Meaning);
        NavigationManager.NavigateTo("/phrases/review?shuffle=true&loop=true");
    }

    // ナビ
    private void GoCreate() => NavigationManager.NavigateTo("/phrases/create");
    private void GoEdit(Guid id) => NavigationManager.NavigateTo($"/phrases/edit/{id}");
}
