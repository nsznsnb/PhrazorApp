@page "/phrases"
@attribute [Authorize]
@using MudBlazor
@using PhrazorApp.Models
@using PhrazorApp.Utils
@using System.Linq.Expressions

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject PhraseService PhraseService
@inject UiOperationRunner UiOperationRunner
@inject ReviewSession ReviewSession

<MudStack Spacing="2">
    <SectionTitle Title="フレーズ一覧" />
    <!-- 上部アクション -->
    <ActionCard>
        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Info"
                   StartIcon="@Icons.Material.TwoTone.Add"
                   OnClick="GoCreate">
            新規追加
        </MudButton>

        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Default"
                   StartIcon="@Icons.Material.TwoTone.UploadFile"
                   OnClick="OpenCsvUploadDialog">
            CSV読込
        </MudButton>
    </ActionCard>
    <BaseCard>
        <SelectableTable TItem="PhraseListItemModel"
                         @ref="_table"
                         Items="Elements"
                         IdSelector="@(x => x.Id)"
                         Title=""
                         Search="true"
                         SearchPlaceholder="検索"
                         SearchBy="BuildSearchTerms"
                         Pager="TablePagerMode.Auto"
                         RowsPerPage="@_rowsPerPage"
                         Height="500px">

            <!-- ツールバー（ページ側で全て差し込む） -->
            <ExtraToolbar Context="tb">
                @if (tb.IsMdUp)
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Small"
                               StartIcon="@Icons.Material.TwoTone.PlayArrow"
                               Disabled="@(tb.SelectedCountInView == 0)"
                               OnClick="@(() => StartTest(tb.GetSelectedIdsInView()))">
                        テスト開始
                    </MudButton>

                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Small"
                               StartIcon="@Icons.Material.TwoTone.PlayArrow"
                               Disabled="@(((tb.GetSelectedIdsAll()?.Count) ?? 0) == 0)"
                               OnClick="@(() => StartReviewSelected(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                        選択して復習
                    </MudButton>

                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Info"
                               Size="Size.Small"
                               StartIcon="@Icons.Material.TwoTone.Label"
                               Disabled="@(((tb.GetSelectedIdsAll()?.Count) ?? 0) == 0)"
                               OnClick="@(() => OpenBulkGenreDialog(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                        カテゴリー一括設定
                    </MudButton>

                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Info"
                               Size="Size.Small"
                               StartIcon="@Icons.Material.TwoTone.Bookmarks"
                               Disabled="@(((tb.GetSelectedIdsAll()?.Count) ?? 0) == 0)"
                               OnClick="@(() => OpenBulkPhrasebookDialog(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                        フレーズ帳に追加
                    </MudButton>

                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Error"
                               Size="Size.Small"
                               StartIcon="@Icons.Material.TwoTone.Delete"
                               Disabled="@(((tb.GetSelectedIdsAll()?.Count) ?? 0) == 0)"
                               OnClick="@(async () => await OnBulkDeleteRequested(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                        一括削除
                    </MudButton>

                    <MudSpacer />

                }
                else
                {
                    <MudStack Row Spacing="1" AlignItems="AlignItems.Center" Style="width:100%">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   StartIcon="@Icons.Material.TwoTone.PlayArrow"
                                   FullWidth="true"
                                   Disabled="@(tb.SelectedCountInView == 0)"
                                   OnClick="@(() => StartTest(tb.GetSelectedIdsInView()))">
                            テスト開始
                        </MudButton>

                        <MudMenu Dense="true" OffsetY="true">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Outlined"
                                           Color="Color.Default"
                                           Size="Size.Small"
                                           StartIcon="@Icons.Material.TwoTone.MoreHoriz">
                                    その他
                                </MudButton>
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem Class="mud-primary-text"
                                             Disabled="@(((tb.GetSelectedIdsAll()?.Count) ?? 0) == 0)"
                                             OnClick="@(() => StartReviewSelected(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                                    <MudIcon Icon="@Icons.Material.TwoTone.PlayArrow" Color="Color.Primary" Class="mr-2" />
                                    選択して復習
                                </MudMenuItem>

                                <MudMenuItem Class="mud-info-text"
                                             Disabled="@(((tb.GetSelectedIdsAll()?.Count) ?? 0) == 0)"
                                             OnClick="@(() => OpenBulkGenreDialog(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                                    <MudIcon Icon="@Icons.Material.TwoTone.Label" Color="Color.Info" Class="mr-2" />
                                    カテゴリー一括設定
                                </MudMenuItem>

                                <MudMenuItem Class="mud-secondary-text"
                                             Disabled="@(((tb.GetSelectedIdsAll()?.Count) ?? 0) == 0)"
                                             OnClick="@(() => OpenBulkPhrasebookDialog(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                                    <MudIcon Icon="@Icons.Material.TwoTone.Bookmarks" Color="Color.Secondary" Class="mr-2" />
                                    フレーズ帳に追加
                                </MudMenuItem>

                                <MudMenuItem Class="mud-error-text"
                                             Disabled="@(((tb.GetSelectedIdsAll()?.Count) ?? 0) == 0)"
                                             OnClick="@(async () => await OnBulkDeleteRequested(tb.GetSelectedIdsAll() ?? new HashSet<Guid>()))">
                                    <MudIcon Icon="@Icons.Material.TwoTone.Delete" Color="Color.Error" Class="mr-2" />
                                    一括削除
                                </MudMenuItem>
                            </ChildContent>

                        </MudMenu>
                    </MudStack>
                }
            </ExtraToolbar>

            <!-- Header -->
            <HeaderContent>
                <MudTh>フレーズ</MudTh>
                <MudTh style="min-width:220px;">カテゴリ</MudTh>
                <MudTh style="width:120px; white-space:nowrap; text-align:right;">復習回数</MudTh>
                <MudTh style="width:160px; white-space:nowrap;">作成日時</MudTh>
                <MudTh style="min-width:200px;">操作</MudTh>
            </HeaderContent>

            <!-- Rows -->
            <RowTemplate Context="x">
                <MudTd>
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.subtitle1" Style="font-weight:600;">@x.Phrase</MudText>
                        <MudText Typo="Typo.subtitle1">@x.Meaning</MudText>
                    </MudStack>
                </MudTd>

                <MudTd>
                    @if (x.SelectedDropItems?.Count > 0)
                    {
                        <MudStack Row="true" Wrap="Wrap.Wrap" Spacing="1">
                            @foreach (var c in x.SelectedDropItems)
                            {
                                <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small">@c.Name</MudChip>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudText Color="Color.Secondary">—</MudText>
                    }
                </MudTd>

                <MudTd Align="Align.Right">@x.ReviewCount</MudTd>

                <MudTd style="white-space:nowrap;">
                    @DateUtil.Format(x.CreatedAt)
                </MudTd>

                <MudTd Align="Align.Right" style="min-width:200px;">
                    <MudStack Row>
                        <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info"
                                   StartIcon="@Icons.Material.TwoTone.Edit"
                                   OnClick="@(() => GoEdit(x.Id))">
                            編集
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Error"
                                   StartIcon="@Icons.Material.TwoTone.Delete"
                                   OnClick="@(() => OnDeleteButtonClickedAsync(x))">
                            削除
                        </MudButton>
                    </MudStack>
                </MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText Class="p-4">データがありません。</MudText>
            </NoRecordsContent>
        </SelectableTable>
    </BaseCard>
</MudStack>

@code {
    private SelectableTable<PhraseListItemModel>? _table;

    private List<PhraseListItemModel> Elements = new();
    private int _rowsPerPage = 10;

    protected override async Task OnInitializedAsync()
    {
        var data = await UiOperationRunner.ReadWithOverlayAsync(
            () => PhraseService.GetPhraseListAsync(),
            message: AppMessages.MSG_I_PROGRESS_READ
        );
        if (data is not null) Elements = data;
    }

    // --- Toolbar actions ---
    private void GoCreate() => NavigationManager.NavigateTo("/phrases/create");
    private void GoEdit(Guid id) => NavigationManager.NavigateTo($"/phrases/edit/{id}");

    private void StartTest(HashSet<Guid> idsInView)
    {
        if (idsInView.Count == 0)
        {
            Snackbar.Add("テスト対象が選択されていません。", Severity.Warning);
            return;
        }
        Snackbar.Add($"テスト開始: {idsInView.Count} 件", Severity.Info);
    }

    private void StartReviewSelected(HashSet<Guid> selectedIds)
    {
        if (selectedIds.Count == 0)
        {
            Snackbar.Add("復習対象が選択されていません。", Severity.Warning);
            return;
        }

        var selected = Elements.Where(x => selectedIds.Contains(x.Id)).ToList();
        if (selected.Count == 0)
        {
            Snackbar.Add("選択に一致する項目が見つかりません。", Severity.Warning);
            return;
        }

        ReviewSession.Set(selected, x => x.Phrase, x => x.Meaning);
        NavigationManager.NavigateTo("/phrases/review?shuffle=true&loop=true");
    }

    private async Task OpenCsvUploadDialog()
    {
        await DialogService.ShowCsvUploadDialogAsync<DialogCsvUpload, PhraseEditModel>(
            this,
            OnCsvUploadCompleted
        );
    }

    private async Task OnCsvUploadCompleted(List<PhraseEditModel> _)
    {
        var list = await UiOperationRunner.ReadNoOverlayAsync(() => PhraseService.GetPhraseListAsync());
        if (list is not null) Elements = list;
        Snackbar.Add(AppMessages.MSG_I_SUCCESS_CSV_TAKE_IN, Severity.Success);
    }

    private async Task OnBulkDeleteRequested(HashSet<Guid> ids)
    {
        if (ids is null || ids.Count == 0)
        {
            Snackbar.Add("削除対象が選択されていません。", Severity.Warning);
            return;
        }

        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.DeleteConfirm,
            $"選択中 {ids.Count} 件を削除します。よろしいですか？");
        if (!ok) return;

        var list = await UiOperationRunner.WriteThenReloadAsync(
            operation: () => PhraseService.DeletePhrasesAsync(ids),
            reloadData: () => PhraseService.GetPhraseListAsync(),
            message: AppMessages.MSG_I_PROGRESS_DELETE
        );

        if (list is not null) Elements = list;

        // 即時に選択をクリア（UXの安全側）
        _table?.ClearSelection();
    }

    private async Task OpenBulkGenreDialog(HashSet<Guid> ids)
    {
        if (ids.Count == 0)
        {
            Snackbar.Add("対象が選択されていません。", Severity.Warning);
            return;
        }

        await DialogService.ShowWithParamsAndCallbackAsync<DialogBulkSetGenres, bool>(
            title: "カテゴリ一括設定",
            caller: this,
            values: new (Expression<Func<DialogBulkSetGenres, object?>>, object?)[] {
                (x => x.TargetIds, ids)
            },
            callbackSelector: x => x.OnApplied,
            handler: async _ =>
            {
                // ★ 反映後は一覧を再読込して正値（CreatedAt/カテゴリ/復習回数）を反映
                var list = await UiOperationRunner.ReadNoOverlayAsync(() => PhraseService.GetPhraseListAsync());
                if (list is not null) Elements = list;
                Snackbar.Add("一括設定が完了しました。", Severity.Success);
            },
            options: DialogServiceExtensions.OptionsSm()
        );
    }

    private Task OpenBulkPhrasebookDialog(HashSet<Guid> ids)
    {
        if (ids.Count == 0)
        {
            Snackbar.Add("対象が選択されていません。", Severity.Warning);
            return Task.CompletedTask;
        }
        // TODO: フレーズ帳選択ダイアログを開く → 反映後 Elements 再読込
        Snackbar.Add("フレーズ帳への一括追加は未実装です。", Severity.Info);
        return Task.CompletedTask;
    }

    // 個別削除
    private async Task OnDeleteButtonClickedAsync(PhraseListItemModel item)
    {
        var suffix = item.Phrase.Length > 50 ? "..." : "";
        var targetPhrase = $"{item.Phrase.Substring(0, Math.Min(item.Phrase.Length, 50))}{suffix}";

        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.DeleteConfirm,
            string.Format(AppMessages.MSG_I_CONFIRM_DELETE, targetPhrase));
        if (!ok) return;

        var list = await UiOperationRunner.WriteThenReloadAsync(
            operation: () => PhraseService.DeletePhraseAsync(item.Id),
            reloadData: () => PhraseService.GetPhraseListAsync(),
            message: AppMessages.MSG_I_PROGRESS_DELETE
        );

        if (list is not null) Elements = list;
    }

    private IEnumerable<string> BuildSearchTerms(PhraseListItemModel x)
    {
        // 基本
        var terms = new List<string>
    {
        x.Phrase ?? string.Empty,
        x.Meaning ?? string.Empty
    };

        // カテゴリ名（サブジャンル名）
        if (x.SelectedDropItems is not null && x.SelectedDropItems.Count > 0)
            terms.AddRange(x.SelectedDropItems.Select(c => c.Name ?? string.Empty));

        // 復習回数（数字検索対応）
        terms.Add(x.ReviewCount.ToString());

        // 作成日：いくつかの書式を用意（半角/区切り違いでもヒットさせる）
        if (x.CreatedAt.HasValue)
        {
            var d = x.CreatedAt.Value;
            terms.Add(DateUtil.Format(d));          // 既定の表示フォーマット
            terms.Add(d.ToString("yyyy/MM/dd"));
            terms.Add(d.ToString("yyyy-MM-dd"));
            terms.Add(d.ToString("yyyyMMdd"));
            terms.Add(d.ToString("yyyy/MM"));
            terms.Add(d.ToString("yyyy-MM"));
            terms.Add(d.Year.ToString());           // 年だけ検索も可
        }

        return terms;
    }
}
