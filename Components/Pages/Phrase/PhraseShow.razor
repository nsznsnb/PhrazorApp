@page "/phrases"
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject PhraseService PhraseService

<MudContainer>
    <MudStack Spacing="2">
        <SectionTitle Title="フレーズ一覧" />
        <MudCard Elevation="@AppConstants.DEFAULT_ELEVATION">
            <MudCardContent Class="py-2">
                <MudStack Row="true" Spacing="1">
                    <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Info" StartIcon="@Icons.Material.TwoTone.Add" OnClick="@(() => NavigationManager.NavigateTo("/phrases/create"))">新規追加</MudButton>
                    <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Default" StartIcon="@Icons.Material.TwoTone.UploadFile"
                               OnClick="OpenCsvUploadDialog" >CSV読込</MudButton>
                    
                </MudStack>
            </MudCardContent>
        </MudCard>
        <MudTable Items="@Elements" Hover="true" Height="500px" FixedHeader="true" FixedFooter="true" Dense="true"
                  Bordered="true"
                  Elevation="@AppConstants.DEFAULT_ELEVATION" Class="px-4"
                  MultiSelection="true" SelectionChangeable="true" @bind-SelectedItems="selectedItems"
                  Filter="new Func<PhraseModel, bool>(FilterFunc)">
            <ToolBarContent>
                <MudStack Row Spacing="4">
                    <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error" StartIcon="@Icons.Material.TwoTone.Delete" OnClick="OnBulkDeleteButtonClickedAsync">@AppConstants.LABEL_BUTTON_BULK_DELETE</MudButton>
                </MudStack>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>フレーズ</MudTh>
                <MudTh style="min-width: 200px;">操作</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.subtitle1" Style="font-weight: 600;">@context.Phrase</MudText>
                        <MudText Typo="Typo.subtitle1">@context.Meaning</MudText>
                    </MudStack>

                </MudTd>
                <MudTd Align="Right" style="min-width: 200px;">
                    <MudStack Row="true">
                        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Info" StartIcon="@Icons.Material.TwoTone.Edit" OnClick="@(() => NavigationManager.NavigateTo($"/phrases/edit/{context.Id}"))">@AppConstants.LABEL_BUTTON_EDIT</MudButton>
                        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error" StartIcon="@Icons.Material.TwoTone.Delete" OnClick="@(() => OnDeleteButtonClickedAsync(context))">@AppConstants.LABEL_BUTTON_DELETE</MudButton>
                    </MudStack>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>


    </MudStack>
</MudContainer>



@code {
    private string searchString = "";

    private PhraseModel model = new PhraseModel();

    private List<PhraseModel> Elements = new();
    private HashSet<PhraseModel> selectedItems = new HashSet<PhraseModel>();


    protected override async Task OnInitializedAsync()
    {
        // 一覧取得
        Elements = await PhraseService.GetPhraseViewModelListAsync();

    }

    private bool FilterFunc(PhraseModel element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Phrase.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Meaning.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task OnBulkDeleteButtonClickedAsync()
    {

        // 確認ダイアログ（OKなら続行）
        if (!await DialogService.ShowConfirmAsync(
                DialogConfirmType.DeleteConfirm,
                string.Format(AppMessages.MSG_I_CONFIRM_DELETE, "選択されたフレーズ")))
        {
            return;
        }

    }

    private async Task OnDeleteButtonClickedAsync(PhraseModel item)
    {
        var suffix = item.Phrase.Length > 50 ? "..." : "";
        var targetPhrase = $"{item.Phrase.Substring(0, Math.Min(item.Phrase.Length, 50))}{suffix}";
        // 確認ダイアログ（OKなら続行）
        if (!await DialogService.ShowConfirmAsync(
                DialogConfirmType.DeleteConfirm,
                string.Format(AppMessages.MSG_I_CONFIRM_DELETE, targetPhrase)))
        {
            return;
        }

        // ジャンル削除
        var result = await PhraseService.DeletePhraseAsync(item.Id);
        Snackbar.AddServiceResult(result);
        if (!result.IsSuccess)
        {
            return;
        }

        // 一覧取得
        Elements = await PhraseService.GetPhraseViewModelListAsync();

    }

    private async Task OpenCsvUploadDialog()
    {
        await DialogService.ShowCsvUploadDialogAsync<DialogCsvUpload, PhraseModel>(
            this,
            OnCsvUploadCompleted
        );
    }

    private async Task OnCsvUploadCompleted(List<PhraseModel> importedPhrases)
    {
        if (importedPhrases is null || !importedPhrases.Any())
            return;

        // 必要に応じてデータベースへ保存処理
        foreach (var phrase in importedPhrases)
        {
            await PhraseService.CreatePhraseAsync(phrase);
        }

        // リロード
        Elements = await PhraseService.GetPhraseViewModelListAsync();
        Snackbar.Add("CSVからフレーズを読み込みました。", Severity.Success);
    }



}
