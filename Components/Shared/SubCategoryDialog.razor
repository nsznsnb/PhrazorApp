@inject IDialogService DialogService
@inject IDialogReference DialogReference

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6">@ParentCategory.Name のサブカテゴリ</MudText>

        <MudStack Spacing="1" Class="my-2">
            @foreach (var sub in SubCategories)
            {
                <MudChip T="string" Color="Color.Primary" Variant="Variant.Filled" OnClose="@(() => RemoveSubCategory(sub))" Closeable="true">
                    @sub.Name
                </MudChip>
            }
        </MudStack>

        <MudTextField @bind-Value="NewSubCategoryName" Label="新しいサブカテゴリ" />
        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Secondary" OnClick="AddSubCategory">追加</MudButton>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Save">保存</MudButton>
        <MudButton OnClick="() => DialogReference.Close()">キャンセル</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter] public LargeCategoryModel ParentCategory { get; set; } = default!;

    private List<SmallCategoryModel> SubCategories = new();
    private string NewSubCategoryName = "";

    protected override void OnInitialized()
    {
        // 編集用にコピー（直接編集しない）
        SubCategories = ParentCategory.SubCategories.Select(s =>
            new SmallCategoryModel { Id = s.Id, Name = s.Name }).ToList();
    }

    private void AddSubCategory()
    {
        if (!string.IsNullOrWhiteSpace(NewSubCategoryName))
        {
            SubCategories.Add(new SmallCategoryModel
            {
                Id = Guid.NewGuid(),
                Name = NewSubCategoryName.Trim()
            });
            NewSubCategoryName = "";
        }
    }

    private void RemoveSubCategory(SmallCategoryModel sub)
    {
        SubCategories.Remove(sub);
    }

    private void Save()
    {
        ParentCategory.SubCategories = SubCategories;
        DialogReference.Close(DialogResult.Ok(true));
    }
}
