@using Blazored.FluentValidation
@using FluentValidation.Results
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject GenreService GenreService
@inject NavigationManager NavigationManager
@inject UiOperationRunner UiOperationRunner
@inject IServiceProvider ServiceProvider

<EditForm EditContext="_editCtx" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
    <FluentValidationValidator />
    <MudStack Spacing="2">
        <ActionCard>
            <!-- ❶ クリックで Validate させたいので Submit に変更 -->
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Outlined"
                       Size="@AppConstants.SIZE_BUTTON"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.TwoTone.Save">
                @AppConstants.LABEL_BUTTON_REGISTER
            </MudButton>

            <MudButton Variant="Variant.Filled"
                       Size="@AppConstants.SIZE_BUTTON"
                       Color="Color.Default"
                       StartIcon="@Icons.Material.TwoTone.Block"
                       OnClick="ClearAsync">
                @AppConstants.LABEL_BUTTON_CLEAR
            </MudButton>
        </ActionCard>

        <BaseCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <SectionTitle HeadingLevel="3" Title="ジャンル入力" />
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent Class="pt-0">
                <MudGrid Spacing="1">
                    <MudItem xs="12" md="4">
                        <MudTextField T="string"
                                      @bind-Value="_model.Name"
                                      For="() => _model.Name"
                                      Margin="Margin.Dense"
                                      Variant="Variant.Outlined"
                                      Label="ジャンル名"
                                      ShrinkLabel />
                    </MudItem>
                </MudGrid>
            </MudCardContent>

            <MudDivider />

            <TableWithToolbar TItem="SubGenreModel"
                              Title="サブジャンル一覧入力"
                              Items="@List" 
                              Height="400px"
                              Search="false"
                              Pager="TablePagerMode.Off">

                <ToolbarContent Context="ctx">
                    <MudButton Variant="Variant.Outlined" Color="Color.Tertiary"
                               StartIcon="@Icons.Material.TwoTone.Add"
                               FullWidth="@(!ctx.IsMdUp)"
                               OnClick="OnAddButtonClicked">
                        @AppConstants.LABEL_BUTTON_ROW_ADD
                    </MudButton>
                </ToolbarContent>

                <HeaderContent>
                    <MudTh style="width:80px;">既定</MudTh>
                    <MudTh>サブジャンル名</MudTh>
                    <MudTh style="width:320px;">操作</MudTh>
                </HeaderContent>

                <RowTemplate Context="sg">
                    <MudTd>
                        <MudTooltip Text="既定にする">
                            <MudIconButton Size="Size.Medium"
                                           Icon="@(sg.IsDefault ? Icons.Material.Filled.RadioButtonChecked : Icons.Material.Filled.RadioButtonUnchecked)"
                                           Color="@(sg.IsDefault ? Color.Primary : Color.Default)"
                                           OnClick="@(() => SetDefaultById(sg.Id))" />
                        </MudTooltip>
                    </MudTd>

                    <MudTd>
                        <MudTextField T="string"
                                      @bind-Value="sg.Name"
                                      For="() => sg.Name"
                                      Class="pb-2"
                                      Margin="Margin.Dense"
                                      Variant="Variant.Outlined"
                                      Label="サブジャンル名"
                                      ShrinkLabel />
                    </MudTd>

                    <MudTd>
                        <MudStack Row Spacing="1">
                            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error"
                                       StartIcon="@Icons.Material.TwoTone.Delete"
                                       OnClick="@(()=> OnDeleteButtonClicked(sg))">
                                @AppConstants.LABEL_BUTTON_ROW_DELETE
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Default"
                                       StartIcon="@Icons.Material.TwoTone.KeyboardArrowUp"
                                       Disabled="@IsFirst(sg)"
                                       OnClick="@(() => MoveUp(sg))">
                                上へ
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Default"
                                       StartIcon="@Icons.Material.TwoTone.KeyboardArrowDown"
                                       Disabled="@IsLast(sg)"
                                       OnClick="@(() => MoveDown(sg))">
                                下へ
                            </MudButton>
                        </MudStack>
                    </MudTd>
                </RowTemplate>

                <NoRecordsContent>
                    <MudText Class="p-4">サブジャンルがありません。「行追加」で追加してください。</MudText>
                </NoRecordsContent>
            </TableWithToolbar>

        </BaseCard>
    </MudStack>
</EditForm>

@code {
    [Parameter] public Guid? Id { get; set; }
    [Parameter] public bool IsDialog { get; set; } = false;
    [CascadingParameter] IMudDialogInstance? DialogInstance { get; set; }
    private bool IsEdit => Id.HasValue;

    private GenreModel _model = new();   // ❸ コンストラクタで new()
    private EditContext? _editCtx;

    // ★ ❷ どこでも必ずこのプロパティ経由で触る（null を完全に排除）
    private List<SubGenreModel> List => _model.SubGenres ??= new();

    protected override async Task OnInitializedAsync()
    {
        // 先に空 EditContext を作っておく（ルート引数直後のレンダでエラーにしない）
        _editCtx = new EditContext(_model);

        if (IsEdit)
        {
            var loaded = await UiOperationRunner.ReadAsync(
                () => GenreService.GetGenreViewModelAsync(Id!.Value));
            _model = loaded ?? new GenreModel { Id = Id!.Value };
        }
        else
        {
            _model = new GenreModel { Id = Guid.NewGuid() };
        }

        // ❹ ロード後も二重で補強
        _model.SubGenres ??= new();

        _editCtx = new EditContext(_model);
        SyncDefaultStateAfterLoad();
    }


    private void SyncDefaultStateAfterLoad()
    {
        if (List.Count == 0) return;
        if (!List.Any(x => x.IsDefault))
            List[0].IsDefault = true;
    }

    private void OnAddButtonClicked()
    {
        var nextOrder = List.Count > 0 ? List.Max(x => x.OrderNo) + 1 : 0;
        var item = new SubGenreModel
        {
            Id = Guid.NewGuid(),
            Name = "",
            OrderNo = nextOrder,
            IsDefault = List.Count == 0
        };
        List.Add(item);
        StateHasChanged();
    }

    private void OnDeleteButtonClicked(SubGenreModel item)
    {
        var wasDefault = item.IsDefault;
        List.Remove(item);
        ReorderSortOrder();

        if (wasDefault && List.Count > 0)
            List[0].IsDefault = true;
    }

    private void ReorderSortOrder()
    {
        for (int i = 0; i < List.Count; i++)
            List[i].OrderNo = i;
    }

    private void MoveUp(SubGenreModel item)
    {
        var index = List.IndexOf(item);
        if (index > 0)
        {
            (List[index], List[index - 1]) = (List[index - 1], List[index]);
            ReorderSortOrder();
        }
    }

    private void MoveDown(SubGenreModel item)
    {
        var index = List.IndexOf(item);
        if (index >= 0 && index < List.Count - 1)
        {
            (List[index], List[index + 1]) = (List[index + 1], List[index]);
            ReorderSortOrder();
        }
    }

    private bool IsFirst(SubGenreModel item)
        => List.Count > 0 && ReferenceEquals(List.First(), item);

    private bool IsLast(SubGenreModel item)
        => List.Count > 0 && ReferenceEquals(List.Last(), item);

    private void SetDefaultById(Guid id)
    {
        foreach (var sg in List) sg.IsDefault = sg.Id == id;
    }

    // ====== ダイアログから呼ばれる想定）======
    public async ValueTask<bool> SubmitAsync(bool validate = true)
    {
        if (_editCtx is null) return false;

        if (validate && !_editCtx.Validate())
        {
            // 失敗時だけページレベルメッセージを発行
            _editCtx.PublishPageLevelErrors(ServiceProvider);
            return false;
        }

        await SubmitCoreAsync();
        return true;
    }
    private Task HandleValidSubmit() => SubmitCoreAsync();

    private async Task SubmitCoreAsync()
    {
        var op = await UiOperationRunner.WriteAsync(
            () => IsEdit ? GenreService.UpdateGenreAsync(_model)
                         : GenreService.CreateGenreAsync(_model),
            message: AppMessages.MSG_I_PROGRESS_SAVE);

        if (!op.IsSuccess) return;

        if (IsDialog && DialogInstance is not null)
            DialogInstance.Close(DialogResult.Ok(_model));
        else
            NavigationManager.NavigateTo("/genres");
    }

    private void OnInvalidSubmit(EditContext editContext)
    {

        editContext.PublishPageLevelErrors(ServiceProvider);
    }



    private Task ClearAsync()
    {
        _model = new GenreModel { Id = Guid.NewGuid() };
        _model.SubGenres ??= new();  // 念のため
        _editCtx = new EditContext(_model);
        StateHasChanged();
        return Task.CompletedTask;
    }
}
