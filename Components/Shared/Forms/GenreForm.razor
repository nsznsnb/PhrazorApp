@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject GenreService GenreService
@inject LoadingManager LoadingManager
@inject NavigationManager NavigationManager
@inject UiOperationRunner UiOperationRunner

<MudForm Model="@model" @ref="@form" Validation="@(genreValidator.ValidateValue)" ValidationDelay="0">
    <MudStack Spacing="2">
        <ActionCard>
            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Primary" StartIcon="@Icons.Material.TwoTone.Save" OnClick="@(async () => await SubmitAsync())">@AppConstants.LABEL_BUTTON_REGISTER</MudButton>
            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error" StartIcon="@Icons.Material.TwoTone.Block" OnClick="ClearAsync">@AppConstants.LABEL_BUTTON_CLEAR</MudButton>
        </ActionCard>

        <!-- ジャンル名入力 -->
        <MudCard Elevation="AppConstants.DEFAULT_ELEVATION" Outlined>
            <MudCardHeader>
                <CardHeaderContent>
                    <SectionTitle HeadingLevel="3" Title="ジャンル入力" />
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid Spacing="1">
                    <MudItem xs="12" md="4">
                        <MudTextField @bind-Value="@model.Name" Margin="Margin.Dense" Variant="Variant.Outlined" Label="ジャンル名" For="() => model.Name" ShrinkLabel />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudDivider />
            <MudCardHeader>
                <CardHeaderContent>
                    <MudStack Row Spacing="4">
                        <SectionTitle HeadingLevel="3" Icon="@Icons.Material.TwoTone.ListAlt" Title="サブジャンル一覧入力" />
                        <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Tertiary" StartIcon="@Icons.Material.TwoTone.Add" OnClick="OnAddButtonClicked">@AppConstants.LABEL_BUTTON_ROW_ADD</MudButton>
                    </MudStack>
                    <MudSpacer />
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <!-- サブジャンルテーブル -->
                <MudTable Items="@model.SubGenres" Outlined Dense="true" Hover="true" FixedHeader="true" Height="400px" Bordered="true" Elevation="AppConstants.DEFAULT_ELEVATION" Class="px-4">
                    <HeaderContent>
                        <MudTh>サブジャンル名</MudTh>
                        <MudTh>操作</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudForm Model="@context" Validation=@(subGenreValidator.ValidateValue)>
                                <MudTextField @bind-Value="@context.Name" For="() => model.Name" Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="サブジャンル名" ShrinkLabel />
                            </MudForm>
                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Error" StartIcon="@Icons.Material.TwoTone.Delete" OnClick="() => OnDeleteButtonClicked(context)">@AppConstants.LABEL_BUTTON_ROW_DELETE</MudButton>
                            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Default" StartIcon="@Icons.Material.TwoTone.KeyboardArrowUp" Disabled="@isFirst(context)" OnClick="@(() => MoveUp(context))">上へ</MudButton>
                            <MudButton Variant="Variant.Outlined" Size="@AppConstants.SIZE_BUTTON" Color="Color.Default" StartIcon="@Icons.Material.TwoTone.KeyboardArrowDown" Disabled="@isLast(context)" OnClick="@(() => MoveDown(context))">下へ</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>

        </MudCard>

       
    </MudStack>
</MudForm>

@code {
    [Parameter] public Guid? Id { get; set; }
    [Parameter] public bool IsDialog { get; set; } = false;
    [CascadingParameter] IMudDialogInstance? DialogInstance { get; set; }

    private bool IsEdit => Id is Guid;

    public GenreModel GetModel() => model;
    private GenreModel model = new();
    private MudForm form = default!;
    private GenreModelValidator genreValidator = new();
    private SubGenreModelValidator subGenreValidator = new();

    protected override async Task OnInitializedAsync() => await ClearAsync();

    private async Task ClearAsync()
    {
        if (IsEdit && Id.HasValue)
        {
            // 読み取りは Message="" 運用 → Snackbar は出ない
            var loaded = await UiOperationRunner.RunLoadOnlyAsync(
                ct => GenreService.GetGenreViewModelAsync(Id.Value, ct),
                runningMessage: "読込中...",
                showCancel: false
            );
            model = loaded ?? new GenreModel { Id = Id.Value };
        }
        else
        {
            model = new GenreModel { Id = Guid.NewGuid() };
        }

        if (form is not null)
            form.ResetValidation();
    }

    private void OnAddButtonClicked()
    {
        var nextSortOrder = model.SubGenres.Count > 0 ? model.SubGenres.Max(x => x.OrderNo) + 1 : 0;
        model.SubGenres.Add(new SubGenreModel { Id = Guid.NewGuid(), Name = "", OrderNo = nextSortOrder });
    }

    private void OnDeleteButtonClicked(SubGenreModel item)
    {
        model.SubGenres.Remove(item);
        ReorderSortOrder();
    }

    private void ReorderSortOrder()
    {
        for (int i = 0; i < model.SubGenres.Count; i++)
            model.SubGenres[i].OrderNo = i;
    }

    private void MoveUp(SubGenreModel item)
    {
        var index = model.SubGenres.IndexOf(item);
        if (index > 0)
        {
            (model.SubGenres[index], model.SubGenres[index - 1]) = (model.SubGenres[index - 1], model.SubGenres[index]);
            ReorderSortOrder();
        }
    }

    private void MoveDown(SubGenreModel item)
    {
        var index = model.SubGenres.IndexOf(item);
        if (index < model.SubGenres.Count - 1)
        {
            (model.SubGenres[index], model.SubGenres[index + 1]) = (model.SubGenres[index + 1], model.SubGenres[index]);
            ReorderSortOrder();
        }
    }

    private bool isFirst(SubGenreModel item) => model.SubGenres.Any() && model.SubGenres.First() == item;
    private bool isLast(SubGenreModel item)  => model.SubGenres.Any() && model.SubGenres.Last()  == item;

    public async Task SubmitAsync()
    {
        await form.Validate();
        if (!form.IsValid) return;

        // 確認ダイアログ（OKなら続行）
        var ok = await DialogService.ShowConfirmAsync(
            DialogConfirmType.RegisterConfirm,
            string.Format(AppMessages.MSG_I_CONFIRM_REGIST, model.Name));
        if (!ok) return;

        // 作成 or 更新（非ジェネリック）。メッセージ表示は Runner におまかせ。
        var op = await UiOperationRunner.RunAsync(
            ct => IsEdit
                ? GenreService.UpdateGenreAsync(model, ct)
                : GenreService.CreateGenreAsync(model, ct),
            runningMessage: IsEdit ? "更新中..." : "登録中...",
            showCancel: true
        );

        if (!op.IsSuccess) return;

        if (IsDialog && DialogInstance is not null)
            DialogInstance.Close(DialogResult.Ok(model));
        else
            NavigationManager.NavigateTo("/genres");
    }
}
