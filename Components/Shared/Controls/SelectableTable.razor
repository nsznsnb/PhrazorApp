@typeparam TItem
@using MudBlazor

<TableWithToolbar TItem="TItem"
                  Title="@Title"
                  Items="@Items"
                  Search="@Search"
                  SearchBy="@SearchBy"
                  SearchPlaceholder="@SearchPlaceholder"
                  Pager="@Pager"
                  RowsPerPage="@RowsPerPage"
                  Height="@Height"
                  UseMultiSelection="@UseMultiSelection"
                  Comparer="@Comparer"
                  SelectedItems="@WorkingSelectedItems"
                  SelectedItemsChanged="OnChildSelectedItemsChanged"
                  IdSelector="IdSelector">

    <!-- Sm&Down：ヘッダーが出ないので Toolbar で全選択 -->
    <ToolbarContent Context="tb">
        @if (UseMultiSelection)
        {
            <MudHidden Breakpoint="Breakpoint.SmAndUp">
                <div style="width:100%">
                    <MudCheckBox T="bool"
                                 @key=@($"sel-all-mobile|{tb.SearchText}|{tb.SelectedCountInView}")
                                 Value="@tb.AllInViewSelected"
                                 ValueChanged="@(v => tb.ToggleSelectAllInView(v))"
                                 Dense="true"
                                 Disabled="@(!tb.HasFilteredRows)"
                                 Label="全選択(検索結果)" />
                </div>
            </MudHidden>
        }


        @if (ExtraToolbar is not null)
        {
            var compat = new SelectableTableToolbarContext(
            SelectedCountInView: tb.SelectedCountInView,
            IsMdUp: tb.IsMdUp,
            SearchText: tb.SearchText ?? string.Empty,
            GetSelectedIdsInView: tb.GetSelectedIdsInView,
            GetSelectedIdsAll: tb.GetSelectedIdsAll
            );

            if (tb.IsMdUp)
            {
                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                    @ExtraToolbar(compat)
                </MudStack>
            }
            else
            {
                <MudStack Spacing="2" AlignItems="AlignItems.Stretch" Style="width:100%">
                    @ExtraToolbar(compat)
                </MudStack>
            }
        }
    </ToolbarContent>

    <HeaderContent>@HeaderContent</HeaderContent>
    <RowTemplate Context="row">@RowTemplate(row)</RowTemplate>
    <NoRecordsContent>@NoRecordsContent</NoRecordsContent>
</TableWithToolbar>

@code {
    // ===== 公開パラメータ =====
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public Func<TItem, Guid>? IdSelector { get; set; } // 必要な画面のみ
    [Parameter] public RenderFragment? HeaderContent { get; set; }
    [Parameter] public RenderFragment<TItem>? RowTemplate { get; set; }
    [Parameter] public RenderFragment? NoRecordsContent { get; set; }

    // 追加ツールバー（互換）
    public readonly record struct SelectableTableToolbarContext(
        int SelectedCountInView,
        bool IsMdUp,
        string SearchText,
        Func<HashSet<Guid>> GetSelectedIdsInView,
        Func<HashSet<Guid>> GetSelectedIdsAll
    );
    [Parameter] public RenderFragment<SelectableTableToolbarContext>? ExtraToolbar { get; set; }

    // 表示オプション
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Height { get; set; } = "500px";
    [Parameter] public TablePagerMode Pager { get; set; } = TablePagerMode.Auto;
    [Parameter] public int RowsPerPage { get; set; } = 10;

    // 検索
    [Parameter] public bool Search { get; set; } = true;
    [Parameter] public string SearchPlaceholder { get; set; } = "検索";
    [Parameter] public Func<TItem, IEnumerable<string>>? SearchBy { get; set; }

    // MultiSelection（既定 false）
    [Parameter] public bool UseMultiSelection { get; set; } = true;
    [Parameter] public IEqualityComparer<TItem>? Comparer { get; set; }

    // 選択セット（任意）
    [Parameter] public HashSet<TItem>? SelectedItems { get; set; }
    [Parameter] public EventCallback<HashSet<TItem>> SelectedItemsChanged { get; set; }

    // 親が未指定のときのローカル選択
    private HashSet<TItem>? _localSelected;
    private IEqualityComparer<TItem> EffectiveComparer => Comparer ?? EqualityComparer<TItem>.Default;

    private HashSet<TItem> WorkingSelectedItems
        => SelectedItems ?? (_localSelected ??= new HashSet<TItem>(EffectiveComparer));

    private Task OnChildSelectedItemsChanged(HashSet<TItem> value)
    {
        if (SelectedItems is not null)
            return SelectedItemsChanged.InvokeAsync(SelectedItems);

        _localSelected = value;
        return Task.CompletedTask;
    }

    // 外部公開：全解除（互換）
    public void ClearSelection()
    {
        WorkingSelectedItems.Clear();
        StateHasChanged();
    }
}
