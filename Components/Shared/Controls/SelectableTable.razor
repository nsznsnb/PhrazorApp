@typeparam TItem
@using MudBlazor

<TableWithToolbar TItem="TItem"
                  Title="@Title"
                  Items="@Items"
                  Search="@Search"
                  SearchBy="@SearchBy"
                  SearchPlaceholder="@SearchPlaceholder"
                  Pager="@Pager"
                  RowsPerPage="@RowsPerPage"
                  Height="@Height">

    <!-- Toolbar -->
    <ToolbarContent Context="tb">
        @{
            var txt = tb.SearchText ?? string.Empty;
            _lastSearchText = txt;
            var cnt = GetSelectedCountInView(txt);
            var hasRows = HasRows(txt);
        }

        <!-- モバイル：検索結果に対する全選択/解除 -->
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <div style="width:100%">
                <MudCheckBox T="bool"
                             Value="@_selectAll"
                             ValueChanged="@( (bool v) => OnSelectAllChanged(v, txt) )"
                             Dense="true"
                             Disabled="@(!hasRows)"
                             Label="@("全選択(検索結果)")" />
            </div>
        </MudHidden>

        <!-- 追加ツールバー（ページから差し込む） -->
        @if (ExtraToolbar is not null)
        {
            var ctx = new SelectableTableToolbarContext(
            SelectedCountInView: cnt,
            IsMdUp: tb.IsMdUp,
            SearchText: txt,
            GetSelectedIdsInView: () => GetSelectedIdsInView(txt),
            GetSelectedIdsAll: () => GetSelectedIdsAll()
            );

            if (tb.IsMdUp)
            {
                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                    @ExtraToolbar(ctx)
                </MudStack>
            }
            else
            {
                <MudStack Spacing="2" AlignItems="AlignItems.Stretch" Style="width:100%">
                    @ExtraToolbar(ctx)
                </MudStack>
            }
        }
    </ToolbarContent>

    <!-- Header（左端：選択チェック。デスクトップのみ） -->
    <HeaderContent>
        <MudTh style="width:48px;text-align:center;">
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudTooltip Text="@(_selectAll ? "全解除" : "全選択")"
                            Arrow="true" Placement="Placement.Top">
                    <MudCheckBox T="bool"
                                 Value="@_selectAll"
                                 ValueChanged="@( (bool v) => OnSelectAllChanged(v, _lastSearchText) )"
                                 Disabled="@(!HasRows(_lastSearchText))" />
                </MudTooltip>
            </MudHidden>
        </MudTh>
        @HeaderContent
    </HeaderContent>

    <!-- Rows（左端チェック） -->
    <RowTemplate Context="row">
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudTd style="width:64px;">
                <div style="width:48px;height:48px;display:flex;align-items:center;justify-content:center;cursor:pointer;"
                     @onclick="@(() => ToggleRow(GetId(row), !IsSelected(GetId(row))))"
                     aria-label="行を選択/解除">
                    <MudCheckBox @key="GetId(row)" T="bool"
                                 Size="Size.Large"
                                 Value="@IsSelected(GetId(row))"
                                 ValueChanged="@( (bool v) => ToggleRow(GetId(row), v) )"
                                 @onclick:stopPropagation="true" />
                </div>
            </MudTd>
        </MudHidden>

        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudTd style="width:48px;text-align:center; cursor:pointer;"
                   @onclick="@(() => ToggleRow(GetId(row), !IsSelected(GetId(row))))">
                <div @onclick:stopPropagation="true" @onmousedown:stopPropagation="true">
                    <MudCheckBox @key="GetId(row)" T="bool"
                                 Value="@IsSelected(GetId(row))"
                                 ValueChanged="@( (bool v) => ToggleRow(GetId(row), v) )" />
                </div>
            </MudTd>
        </MudHidden>

        @RowTemplate(row)
    </RowTemplate>

    <NoRecordsContent>
        @NoRecordsContent
    </NoRecordsContent>
</TableWithToolbar>

@code {
    // -------- 公開パラメータ --------
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public Func<TItem, Guid> IdSelector { get; set; } = default!;
    [Parameter] public RenderFragment? HeaderContent { get; set; }
    [Parameter] public RenderFragment<TItem>? RowTemplate { get; set; }
    [Parameter] public RenderFragment? NoRecordsContent { get; set; }

    // 表示オプション
    [Parameter] public string? Title { get; set; }   // ページ側で未指定ならツールバーにタイトルは出ません
    [Parameter] public string? Height { get; set; } = "500px";
    [Parameter] public TablePagerMode Pager { get; set; } = TablePagerMode.Auto;
    [Parameter] public int RowsPerPage { get; set; } = 10;

    // 検索
    [Parameter] public bool Search { get; set; } = true;
    [Parameter] public string SearchPlaceholder { get; set; } = "検索";
    [Parameter] public Func<TItem, IEnumerable<string>>? SearchBy { get; set; }

    // 外部ツールバー差し込み
    [Parameter] public RenderFragment<SelectableTableToolbarContext>? ExtraToolbar { get; set; }

    // -------- 内部状態 --------
    private HashSet<Guid> _selected = new();
    private bool _selectAll;
    private string _lastSearchText = "";

    [CascadingParameter] public Breakpoint CurrentBreakpoint { get; set; } = Breakpoint.Xl;

    // Public: 呼び出し側から選択解除したい時に呼ぶ
    public void ClearSelection()
    {
        _selected.Clear();
        _selectAll = false;
        RecalcSelectAll(_lastSearchText);
    }

    protected override void OnParametersSet()
    {
        PruneSelectionToExistingItems();
        RecalcSelectAll(_lastSearchText);
    }

    // 基本ユーティリティ
    private Guid GetId(TItem item) => IdSelector(item);
    private bool IsSelected(Guid id) => _selected.Contains(id);
    private IEnumerable<TItem> ItemsView(string text)
        => (Items ?? Enumerable.Empty<TItem>()).Where(x => Matches(x, text));

    private bool Matches(TItem item, string text)
    {
        if (!Search || string.IsNullOrWhiteSpace(text)) return true;
        var t = text.Trim();
        if (SearchBy is null)
            return item?.ToString()?.Contains(t, StringComparison.OrdinalIgnoreCase) ?? false;

        foreach (var s in SearchBy(item) ?? Array.Empty<string>())
            if (!string.IsNullOrEmpty(s) && s.Contains(t, StringComparison.OrdinalIgnoreCase))
                return true;
        return false;
    }

    private bool HasRows(string text) => ItemsView(text).Any();

    private void ToggleRow(Guid id, bool isChecked)
    {
        if (isChecked) _selected.Add(id); else _selected.Remove(id);
        RecalcSelectAll(_lastSearchText);
    }

    private void PruneSelectionToExistingItems()
    {
        var ids = (Items ?? Enumerable.Empty<TItem>()).Select(GetId).ToHashSet();
        _selected.RemoveWhere(id => !ids.Contains(id));
    }

    private void RecalcSelectAll(string text)
    {
        var all = ItemsView(text).Select(GetId).ToList();
        _selectAll = all.Count > 0 && all.All(_selected.Contains);
        StateHasChanged();
    }

    private Task OnSelectAllChanged(bool v, string text)
    {
        if (!HasRows(text))
        {
            _selectAll = false;
            return Task.CompletedTask;
        }

        var idsInView = ItemsView(text).Select(GetId).ToHashSet();
        if (v) foreach (var id in idsInView) _selected.Add(id);
        else _selected.RemoveWhere(idsInView.Contains);

        RecalcSelectAll(text);
        return Task.CompletedTask;
    }

    private int GetSelectedCountInView(string text)
        => ItemsView(text).Select(GetId).Count(_selected.Contains);

    private HashSet<Guid> GetSelectedIdsInView(string text)
        => ItemsView(text).Select(GetId).Where(_selected.Contains).ToHashSet();

    private HashSet<Guid> GetSelectedIdsAll()
        => (Items ?? Enumerable.Empty<TItem>())
           .Select(GetId)
           .Where(_selected.Contains)
           .ToHashSet();

    // ツールバーに渡すコンテキスト
    public readonly record struct SelectableTableToolbarContext(
        int SelectedCountInView,
        bool IsMdUp,
        string SearchText,
        Func<HashSet<Guid>> GetSelectedIdsInView,
        Func<HashSet<Guid>> GetSelectedIdsAll
    );
}
