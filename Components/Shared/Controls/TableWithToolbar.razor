@using MudBlazor
@typeparam TItem

<!-- Toolbar -->
<MudCardContent Class="p-0">
    <MudStack Row="@IsMdUp"
              Spacing="@(IsMdUp ? 3 : 2)"
              AlignItems="AlignItems.Center"
              Justify="Justify.FlexStart">

        @* 1) 左：タイトル *@
        @if (!string.IsNullOrWhiteSpace(Title))
        {
            <MudText Typo="Typo.h6" Class="@(!IsMdUp ? "py-2 w-100" : "py-2")">@Title</MudText>
        }

        @* 2) 左：ツールバー（ボタン等）
              - 大画面：横並び
              - 小画面：縦積み（FullWidthは呼び出し側で指定） *@
        @if (ToolbarContent is not null)
        {
            var ctx = new TableToolbarContext { IsMdUp = IsMdUp, SearchText = SearchText };

            if (IsMdUp)
            {
                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                    @ToolbarContent(ctx)
                </MudStack>
            }
            else
            {
                <MudStack Row="false" Spacing="2" AlignItems="AlignItems.Stretch" Style="width:100%">
                    @ToolbarContent(ctx)
                </MudStack>
            }
        }

        @* 左右の区切り *@
        @if (IsMdUp)
        {
            <MudSpacer />
        }

        @* 3) 右：検索（小画面はFullWidth） *@
        @if (ShowSearch)
        {
            <MudTextField T="string"
                          Value="@SearchText"
                          ValueChanged="@( (string? v) => OnSearchChanged(v ?? string.Empty) )"
                          Immediate="true"
                          Placeholder="@SearchPlaceholder"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          FullWidth="@(!IsMdUp)"
                          Style="@(IsMdUp ? $"max-width: {SearchBoxMaxWidth};" : "width:100%")"
                          Class="mt-0" />
        }
    </MudStack>
</MudCardContent>

<MudDivider />

<!-- Table 本体 -->
<MudCardContent Class="p-0">
    <MudTable T="TItem"
              Items="@ItemsView"
              Outlined="Outlined" Hover="Hover" Dense="Dense" Bordered="Bordered"
              Height="Height" FixedHeader="FixedHeader" FixedFooter="FixedFooter"
              Elevation="Elevation" Class="Class"
              RowsPerPage="RowsPerPage"
              CurrentPage="@Page"
              RowsPerPageChanged="OnTablePageChanged"
              @attributes="AdditionalAttributes">

        <HeaderContent>
            @HeaderCells
        </HeaderContent>

        <RowTemplate Context="context">
            @RowCells(context)
        </RowTemplate>

        <PagerContent>
            @PagerContent
        </PagerContent>

        <NoRecordsContent>
            @NoRecordsContent
        </NoRecordsContent>
    </MudTable>
</MudCardContent>

@code {
    // --- レスポンシブ（親からCascadingで受け取る想定） ---
    [CascadingParameter] public Breakpoint CurrentBreakpoint { get; set; } = Breakpoint.Xl;
    private bool IsMdUp => CurrentBreakpoint >= Breakpoint.Md;

    // --- 必須 ---
    [Parameter] public IEnumerable<TItem>? Items { get; set; }

    // --- スロット ---
    [Parameter] public RenderFragment? HeaderCells { get; set; }
    [Parameter] public RenderFragment<TItem>? RowCells { get; set; }
    [Parameter] public RenderFragment? PagerContent { get; set; }
    [Parameter] public RenderFragment? NoRecordsContent { get; set; }
    [Parameter] public RenderFragment<TableToolbarContext>? ToolbarContent { get; set; }

    // --- 検索 ---
    [Parameter] public bool ShowSearch { get; set; } = true;
    [Parameter] public string SearchText { get; set; } = "";
    [Parameter] public EventCallback<string> SearchTextChanged { get; set; }
    [Parameter] public string SearchPlaceholder { get; set; } = "検索";
    [Parameter] public string SearchBoxMaxWidth { get; set; } = "400px";
    [Parameter] public Func<TItem, string, bool>? Filter { get; set; }

    // --- 見た目 ---
    [Parameter] public string? Title { get; set; }
    [Parameter] public bool Outlined { get; set; } = true;
    [Parameter] public bool Hover { get; set; } = true;
    [Parameter] public bool Dense { get; set; } = true;
    [Parameter] public bool Bordered { get; set; } = true;
    [Parameter] public bool FixedHeader { get; set; } = true;
    [Parameter] public bool FixedFooter { get; set; } = true;
    [Parameter] public int Elevation { get; set; } = AppConstants.DEFAULT_ELEVATION;
    [Parameter] public string? Height { get; set; } = "500px";
    [Parameter] public string? Class { get; set; } = "px-4";

    // --- ページング（必要なら親でバインド可能） ---
    [Parameter] public int Page { get; set; }
    [Parameter] public EventCallback<int> PageChanged { get; set; }
    [Parameter] public int RowsPerPage { get; set; } = 10;

    // --- その他委譲 ---
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    // 検索後の表示集合
    private IEnumerable<TItem> ItemsView =>
        (Items ?? Enumerable.Empty<TItem>())
        .Where(x => Filter is null || Filter(x, SearchText));

    private async Task OnSearchChanged(string value)
    {
        if (SearchText == value) return;
        SearchText = value;
        if (SearchTextChanged.HasDelegate)
            await SearchTextChanged.InvokeAsync(value);
        StateHasChanged();
    }

    private async Task OnTablePageChanged(int v)
    {
        if (Page != v)
        {
            Page = v;
            if (PageChanged.HasDelegate)
                await PageChanged.InvokeAsync(v);
        }
    }

    // ツールバーに渡す簡易コンテキスト
    public sealed class TableToolbarContext
    {
        public bool IsMdUp { get; set; }
        public string SearchText { get; set; } = "";
    }
}
