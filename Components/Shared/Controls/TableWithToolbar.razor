@typeparam TItem

@if (HasToolbar)
{
    <MudCardContent Class="p-0">
        <MudStack Row="@IsMdUp" Spacing="@(IsMdUp ? 3 : 2)" AlignItems="AlignItems.Center" Justify="Justify.FlexStart">
            @if (!string.IsNullOrWhiteSpace(Title))
            {
                <MudText Typo="Typo.h6" Class="@(!IsMdUp ? "py-2 w-100" : "py-2")">@Title</MudText>
            }

            @if (ToolbarContent is not null)
            {
                var ctx = new TableToolbarContext { IsMdUp = IsMdUp, SearchText = _searchText };
                @if (IsMdUp)
                {
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        @ToolbarContent(ctx)
                    </MudStack>
                }
                else
                {
                    <MudStack Row="false" Spacing="2" AlignItems="AlignItems.Stretch" Style="width:100%">
                        @ToolbarContent(ctx)
                    </MudStack>
                }
            }

            @if (IsMdUp)
            {
                <MudSpacer />
            }

            @if (Search)
            {
                <MudTextField T="string"
                              Value="@_searchText"
                              ValueChanged="OnSearchChanged"
                              Immediate="true"
                              Placeholder="@SearchPlaceholder"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Clearable="true"
                              ClearIcon="@Icons.Material.Filled.Clear"
                              IconSize="Size.Medium"
                              FullWidth="@(!IsMdUp)"
                              Style="@(IsMdUp ? "max-width: 400px;" : "width:100%")" />
            }
        </MudStack>
    </MudCardContent>
    <MudDivider />
}

<MudCardContent Class="p-0">
    <MudTable T="TItem"
              Items="@ItemsView"
              Hover="true" Dense="true" Bordered="true" Outlined="true" 
              HorizontalScrollbar="true"
              Height="@EffectiveHeight"
              FixedHeader="@EffectiveFixedHeader" 
              FixedFooter="false"
              Elevation="@Elevation" Class="@Class"
              CurrentPage="@_page" CurrentPageChanged="OnPageChanged"
              RowsPerPage="@_rowsPerPageInternal" RowsPerPageChanged="OnRowsPerPageChanged"
              @attributes="AdditionalAttributes">

        <HeaderContent>
            @HeaderContent
        </HeaderContent>

        <RowTemplate Context="row">
            @RowTemplate(row)
        </RowTemplate>

        <PagerContent>
            @if (Pager == TablePagerMode.Auto)
            {
                <MudTablePager 
                    HorizontalAlignment="HorizontalAlignment.Center"
                    RowsPerPageString=" "
                    InfoFormat="{first_item}-{last_item} / {all_items}" />
            }
        </PagerContent>

        <NoRecordsContent>
            @NoRecordsContent
        </NoRecordsContent>
    </MudTable>
</MudCardContent>

@code {
    // 必須
    [Parameter] public IEnumerable<TItem>? Items { get; set; }

    // スロット（MudTable準拠）
    [Parameter] public RenderFragment? HeaderContent { get; set; }
    [Parameter] public RenderFragment<TItem>? RowTemplate { get; set; }
    [Parameter] public RenderFragment? NoRecordsContent { get; set; }
    [Parameter] public RenderFragment<TableToolbarContext>? ToolbarContent { get; set; }

    // 見出し／ツールバー
    [Parameter] public string? Title { get; set; }

    // 検索（内部状態で完結）
    [Parameter] public bool Search { get; set; } = false;
    [Parameter] public Func<TItem, IEnumerable<string>>? SearchBy { get; set; }
    [Parameter] public string SearchPlaceholder { get; set; } = "検索";

    // ページャ
    [Parameter] public TablePagerMode Pager { get; set; } = TablePagerMode.Auto;
    [Parameter] public int RowsPerPage { get; set; } = 10;

    // 高さ/外観
    [Parameter] public string? Height { get; set; }   // 例: "500px" → MaxHeight として扱う
    [Parameter] public int Elevation { get; set; } = AppConstants.DEFAULT_ELEVATION;
    [Parameter] public string? Class { get; set; } = "px-4";

    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    // 内部状態
    private string _searchText = "";
    private int _page = 0;
    private int _rowsPerPageInternal;

    // “Height を MaxHeight として扱う”ための内部推定
    // Dense=true を前提に行高・ヘッダ高を素朴推定
    private const int RowHeightPxDense = 40;
    private const int HeaderHeightPx = 56;

    // ← ここがキモ：MaxHeight を超えるときだけ MudTable.Height を付け、固定ヘッダを有効化
    private string? EffectiveHeight => ShouldScroll ? Height : null;
    private bool EffectiveFixedHeader => ShouldScroll;

    private bool ShouldScroll
    {
        get
        {
            if (string.IsNullOrWhiteSpace(Height)) return false;
            var maxPx = ParsePixel(Height);
            if (maxPx <= 0) return false;

            var visibleCount = Math.Min(_rowsPerPageInternal, ItemsViewCount);
            var needPx = HeaderHeightPx + (visibleCount * RowHeightPxDense);
            return needPx > maxPx;
        }
    }

    private int ItemsViewCount => (ItemsView as ICollection<TItem>)?.Count ?? ItemsView.Count();

    private bool HasToolbar => !string.IsNullOrWhiteSpace(Title) || ToolbarContent is not null || Search;

    protected override void OnParametersSet()
    {
        _rowsPerPageInternal = Pager == TablePagerMode.Auto ? RowsPerPage : int.MaxValue;
    }

    private IEnumerable<TItem> ItemsView
        => (Items ?? Enumerable.Empty<TItem>()).Where(x => !Search || Matches(x, _searchText));

    private bool Matches(TItem item, string text)
    {
        if (!Search || string.IsNullOrWhiteSpace(text)) return true;
        var t = text.Trim();
        if (SearchBy is null) return item?.ToString()?.Contains(t, StringComparison.OrdinalIgnoreCase) ?? false;

        foreach (var s in SearchBy(item) ?? Array.Empty<string>())
            if (!string.IsNullOrEmpty(s) && s.Contains(t, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }

    private void OnSearchChanged(string? v)
    {
        var value = v ?? string.Empty;
        if (_searchText == value) return;
        _searchText = value;
        _page = 0; // 検索変更で先頭へ
        StateHasChanged();
    }

    private void OnPageChanged(int v)
    {
        if (_page == v) return;
        _page = v;
        StateHasChanged();
    }

    private void OnRowsPerPageChanged(int size)
    {
        if (Pager == TablePagerMode.Off) return;
        if (_rowsPerPageInternal == size) return;
        _rowsPerPageInternal = size;
        _page = 0;
        StateHasChanged();
    }

    public sealed class TableToolbarContext
    {
        public bool IsMdUp { get; set; }
        public string SearchText { get; set; } = "";
    }

    [CascadingParameter] public Breakpoint CurrentBreakpoint { get; set; } = Breakpoint.Xl;
    private bool IsMdUp => CurrentBreakpoint >= Breakpoint.Md;

    // '500px' → 500 などに変換
    private static int ParsePixel(string? value)
    {
        if (string.IsNullOrWhiteSpace(value)) return 0;
        var s = value.Trim().ToLowerInvariant();
        if (s.EndsWith("px")) s = s[..^2];
        return int.TryParse(s, out var px) ? px : 0;
    }
}
