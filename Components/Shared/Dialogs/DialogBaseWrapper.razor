<MudDialog Class="blur dialog-background responsive-dialog"
           TitleClass="blur dialog-background-title"
           ContentClass="@GetContentClass()"
           ActionsClass="dialog-background-surface">

    <TitleContent>
        <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
            @if (DialogAlertType == DialogAlertType.Error)
            {
                <MudIcon Icon="@Icons.Material.TwoTone.Error" Color="Color.Error" />
            }
            else if (DialogAlertType == DialogAlertType.Warning)
            {
                <MudIcon Icon="@Icons.Material.TwoTone.Warning" Color="Color.Warning" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.TwoTone.Info" Color="Color.Info" />
            }
            <MudText Typo="Typo.h6">@DialogTitle</MudText>
        </MudStack>
    </TitleContent>

    <DialogContent>
        @ChildContent
    </DialogContent>

    <DialogActions>
        @if (ShowExecuteButton)
        {
            <MudButton Variant="Variant.Filled"
                       Color="color"
                       Size="@AppConstants.SIZE_BUTTON"
                       OnClick="@OnExecuteInternal">
                @ExecuteButtonText
            </MudButton>
        }
        <MudButton Variant="Variant.Outlined"
                   Size="@AppConstants.SIZE_BUTTON"
                   OnClick="Cancel">
            @CancelButtonText
        </MudButton>
    </DialogActions>
</MudDialog>

<style>
    .blur {
        backdrop-filter: blur(10px);
    }

    .mud-dialog .mud-dialog-title {
        padding: 12px 24px;
    }

    .dialog-background {
        background-color: transparent;
    }

    .dialog-background-title {
        background: rgb(from var(--mud-palette-dark-lighten) r g b / 30%);
        color: var(--mud-palette-white);
    }

    .mud-dialog-title .mud-icon-button-label {
        color: white;
    }

    .dialog-background-surface {
        background: rgb(from var(--mud-palette-background) r g b / 80%);
    }
</style>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public DialogAlertType DialogAlertType { get; set; } = DialogAlertType.Info;
    [Parameter] public string DialogTitle { get; set; } = string.Empty;
    [Parameter] public string? ContentClass { get; set; }
    [Parameter] public string ExecuteButtonText { get; set; } = "OK";
    [Parameter] public string CancelButtonText { get; set; } = "キャンセル";
    [Parameter] public bool ShowExecuteButton { get; set; } = true;

    // ★ これだけで制御：true で閉じる / false で閉じない
    [Parameter] public Func<ValueTask<bool>>? OnExecuteAsync { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    private Color color => DialogAlertType switch
    {
        DialogAlertType.Info => Color.Primary,
        DialogAlertType.Warning => Color.Warning,
        DialogAlertType.Error => Color.Error,
        _ => Color.Primary
    };

    private string GetContentClass()
        => string.IsNullOrWhiteSpace(ContentClass)
            ? "dialog-background-surface py-10 my-1"
            : $"dialog-background-surface {ContentClass}";

    private async Task OnExecuteInternal()
    {
        var canClose = true;
        if (OnExecuteAsync is not null)
            canClose = await OnExecuteAsync();

        if (canClose)
            MudDialog.Close(DialogResult.Ok(string.Empty));
    }

    private void Cancel() => MudDialog.Cancel();
}
