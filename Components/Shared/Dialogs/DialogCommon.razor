
<DialogBaseWrapper DialogAlertType="@alertType"
                     DialogTitle="@titleText"
                     ExecuteButtonText="@executeButtonText"
                     CancelButtonText="@AppConstants.LABEL_BUTTON_CANCEL"
                     ShowExecuteButton="true"
                     OnExecuteAsync="SubmitAsync">
    <MudText>@ContentText</MudText>
</DialogBaseWrapper>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public DialogConfirmType DialogPattern { get; set; }
    [Parameter] public string ContentText { get; set; } = string.Empty;

    private DialogAlertType alertType = DialogAlertType.Info;
    private string titleText = string.Empty;
    private string executeButtonText = string.Empty;

    protected override void OnInitialized()
    {
        switch (DialogPattern)
        {
            case DialogConfirmType.DeleteConfirm:
                alertType = DialogAlertType.Error;
                titleText = AppConstants.LABEL_DIALOG_TITLE_DELETE_CONFIRM;
                executeButtonText = AppConstants.LABEL_BUTTON_DELETE;
                break;
            case DialogConfirmType.RegisterConfirm:
                alertType = DialogAlertType.Info;
                titleText = AppConstants.LABEL_DIALOG_TITLE_REGISTER_CONFIRM;
                executeButtonText = AppConstants.LABEL_BUTTON_REGISTER;
                break;
            default:
                alertType = DialogAlertType.Info;
                titleText = "確認";
                executeButtonText = "OK";
                break;
        }
    }

    private ValueTask<bool> SubmitAsync() => ValueTask.FromResult(true); // 実行処理は親でハンドリングされるためここでは何もしない
}
