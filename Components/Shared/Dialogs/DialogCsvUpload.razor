@using System.Globalization
@using CsvHelper
@using CsvHelper.Configuration
@using Microsoft.AspNetCore.Components.Forms
@using PhrazorApp.Utils
@inherits DialogCsvUploadBase<PhraseEditModel>
@inject ISnackbar Snackbar
@inject PhraseService PhraseService
@inject UiOperationRunner UiOperationRunner

<DialogBaseWrapper DialogAlertType="DialogAlertType.Info"
                   DialogTitle="CSV読込"
                   ExecuteButtonText="読込"
                   CancelButtonText="@AppConstants.LABEL_BUTTON_CANCEL"
                   ContentClass="py-5 my-1"
                   OnExecuteAsync="SubmitAsync">
    <MudForm Model="@model" @ref="@form" Validation="@(ValidationRules.ValidateValue)" ValidationDelay="0">
        <MudText Typo="Typo.subtitle1" Class="mb-2">CSVファイルを選択してください</MudText>

        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudFileUpload T="IBrowserFile"
                           @ref="_file"
                           For="@(() => model.File)"
                           @bind-Files="model.File"
                           Accept=".csv"
                           MaximumFileCount="1"
                           OnFilesChanged="OnFilesChanged"
                           SuppressOnChangeWhenInvalid="true"
                           Class="my-2">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Size="@AppConstants.SIZE_BUTTON"
                               StartIcon="@Icons.Material.TwoTone.AttachFile">
                        @AppConstants.LABEL_BUTTON_CHOICE_FILE
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

            <MudList T="string">
                <MudListItem>@(model.File?.Name ?? string.Empty)</MudListItem>
            </MudList>
        </MudStack>

        @* ← ここが「ボタン直下」のエラー表示 *@
        @if (_fvFileErrors?.Any() == true)
        {
            @foreach (var msg in _fvFileErrors)
            {
                <MudText Color="Color.Error" Class="mt-1">@msg</MudText>
            }
        }
    </MudForm>
</DialogBaseWrapper>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    private MudForm form = default!;
    private FileModel model = new();
    private FileModelValidator ValidationRules = new();
    private MudFileUpload<IBrowserFile> _file;
    private List<string> _fvFileErrors = new();

    private async Task OnFilesChanged(InputFileChangeEventArgs e)
        => await UpdateFileValidationAsync();

    private async Task UpdateFileValidationAsync()
    {
        var result = await ValidationRules.ValidateValue(model, nameof(FileModel.File));
        _fvFileErrors = result?.ToList() ?? [];
    }

    private Task ClearAsync() => _file?.ClearAsync() ?? Task.CompletedTask;

    private async ValueTask<bool> SubmitAsync()
    {
        await form.Validate();
        if (!form.IsValid) return false;

        var r = await UiOperationRunner.WriteAsync(
            async () =>
            {
                using var stream = model.File.OpenReadStream(10 * 1024 * 1024);

                // 読み込み
                var dtos = await CsvUtil.ReadToListAsync<PhraseImportDto>(stream);
                var phraseModels = dtos.Select(x => x.ToPhraseModel()).ToList();

                // まとめて登録
                var created = await PhraseService.CreatePhrasesAsync(phraseModels);
                if (!created.IsSuccess)
                    return ServiceResult.Failure<bool>(created.Message);

                // 呼び出し元へ通知
                await RaiseCompletedAsync(phraseModels);

                // 成功
                return ServiceResult.Success(true, AppMessages.MSG_I_SUCCESS_CSV_TAKE_IN);
            },
            message: AppMessages.MSG_I_PROGRESS_TAKE_IN
        );

        // 成功時のみ閉じる想定
        return r.IsSuccess;
    }
}
