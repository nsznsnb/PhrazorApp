@typeparam TItem
@using Microsoft.AspNetCore.Components.Forms
@using Blazored.FluentValidation
@using MudBlazor
@using PhrazorApp.Utils
@inherits PhrazorApp.Components.Shared.Dialogs.DialogCsvUploadBase<TItem>
@inject UiOperationRunner UiOperationRunner

<DialogBaseWrapper DialogAlertType="DialogAlertType.Info"
                   DialogTitle="@DialogTitle"
                   ExecuteButtonText="@ExecuteButtonText"
                   CancelButtonText="@AppConstants.LABEL_BUTTON_CANCEL"
                   ContentClass="py-5 my-1"
                   OnExecuteAsync="SubmitAsync">

    <EditForm EditContext="_editCtx">
        <!-- Blazored.FluentValidation を有効化（アセンブリスキャンは不要に） -->
        <FluentValidationValidator DisableAssemblyScanning="true" />

        <MudText Typo="Typo.subtitle1" Class="mb-2">CSVファイルを選択してください</MudText>

        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudFileUpload T="IBrowserFile"
                           @ref="_file"
                           For="@(() => _model.File)"
                           @bind-Files="_model.File"
                           Accept="@Accept"
                           MaximumFileCount="1"
                           OnFilesChanged="OnFilesChanged"
                           SuppressOnChangeWhenInvalid="true"
                           Class="my-2">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled" Size="@AppConstants.SIZE_BUTTON"
                               StartIcon="@Icons.Material.TwoTone.AttachFile">
                        @AppConstants.LABEL_BUTTON_CHOICE_FILE
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

            <MudList T="string">
                <MudListItem>@(_model.File?.Name ?? string.Empty)</MudListItem>
            </MudList>
        </MudStack>

    </EditForm>
</DialogBaseWrapper>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    private readonly FileModel _model = new();
    private EditContext? _editCtx;
    private MudFileUpload<IBrowserFile> _file = default!;

    protected override void OnInitialized()
    {
        // EditContext をモデルに紐づけ
        _editCtx = new EditContext(_model);
    }

    private Task OnFilesChanged(InputFileChangeEventArgs _)
    {
        // ファイル選択時に当該フィールドの再検証を明示的にトリガー
        _editCtx?.NotifyFieldChanged(new FieldIdentifier(_model, nameof(FileModel.File)));
        return Task.CompletedTask;
    }

    private async ValueTask<bool> SubmitAsync()
    {
        if (_editCtx is null) return false;

        // Blazored.FluentValidation 経由で FluentValidation を実行
        if (!_editCtx.Validate())
            return false;

        // ファイルはバリデータ側で NotNull/サイズ/拡張子 等をチェック済み
        if (_model.File is null) return false;

        var res = await UiOperationRunner.WriteAsync(async () =>
        {
            using var stream = _model.File.OpenReadStream((MaxSizeMB > 0 ? MaxSizeMB : 10) * 1024 * 1024);

            var items = await CsvUtil.ReadToListAsync<TItem>(stream);

            // 呼び出し側で DB 反映などを差し込みたい場合
            if (ProcessAsync is not null)
            {
                var op = await ProcessAsync(items);
                if (!op.IsSuccess) return op; // 失敗はそのまま返す
            }

            // 呼び出し元へ通知（テーブル再読込など）
            await RaiseCompletedAsync(items);

            return ServiceResult.None.Success(AppMessages.MSG_I_SUCCESS_CSV_TAKE_IN);
        }, message: AppMessages.MSG_I_PROGRESS_TAKE_IN);

        return res.IsSuccess;
    }
}
