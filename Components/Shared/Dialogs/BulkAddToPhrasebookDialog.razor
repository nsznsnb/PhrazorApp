@using PhrazorApp.Models
@using PhrazorApp.Common
@using MudBlazor

<DialogBaseWrapper DialogAlertType="DialogAlertType.Info"
                   DialogTitle="フレーズ帳に追加"
                   ExecuteButtonText="追加"
                   CancelButtonText="@AppConstants.LABEL_BUTTON_CANCEL"
                   OnExecuteAsync="ApplyAsync">

    <MudStack Spacing="2">
@*         <MudRadioGroup T="BulkPhrasebookMode" @bind-Selected="_mode">
            <MudRadio T="BulkPhrasebookMode" Option="BulkPhrasebookMode.AddToExisting" Color="Color.Primary">
                フレーズ帳に追加（重複は無視）
            </MudRadio>
            <MudRadio T="BulkPhrasebookMode" Option="BulkPhrasebookMode.CreateNew" Color="Color.Primary">
                新規フレーズ帳を作成して追加
            </MudRadio>
        </MudRadioGroup> *@

        @if (_mode == BulkPhrasebookMode.AddToExisting)
        {
            if (!_hasBooks)
            {
                <!-- 帳がない時は未選択＆案内表示 -->
                <MudAlert Severity="Severity.Warning" Dense>
                    フレーズ帳がありません。<MudLink Href="/phrasebooks">フレーズ帳一覧</MudLink>から追加してください。
                </MudAlert>
            }
            else
            {
                <MudSelect T="Guid" Label="フレーズ帳" Variant="Variant.Outlined" Margin="Margin.Dense"
                           @bind-Value="_selectedBookId" Clearable="false">
                    @foreach (var b in _books)
                    {
                        <MudSelectItem T="Guid" Value="@b.Id">@b.Name</MudSelectItem>
                    }
                </MudSelect>
            }
        }
        else
        {
            <MudTextField T="string" Label="新規フレーズ帳名" Variant="Variant.Outlined" Margin="Margin.Dense"
                          @bind-Value="_newBookName" Placeholder="例）よく使う例文" Immediate="true" Clearable="true" />
        }

        <MudAlert Severity="Severity.Info" Dense>
            対象件数: <b>@TargetIds.Count</b>
        </MudAlert>
    </MudStack>
</DialogBaseWrapper>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public HashSet<Guid> TargetIds { get; set; } = new();
    [Parameter] public EventCallback<bool> OnApplied { get; set; }

    [Inject] private UiOperationRunner UiOperationRunner { get; set; } = default!;
    [Inject] private PhraseBookService PhraseBookService { get; set; } = default!;

    private BulkPhrasebookMode _mode = BulkPhrasebookMode.AddToExisting;
    private List<PhraseBookListItemModel> _books = new();
    private Guid _selectedBookId = Guid.Empty; // ← 未選択で初期化
    private string? _newBookName;
    private bool _hasBooks => _books?.Count > 0;

    protected override async Task OnInitializedAsync()
    {
        var books = await UiOperationRunner.ReadAsync(() => PhraseBookService.GetPhraseBooksAsync());
        _books = books ?? new();

        // 帳がある場合だけ初期選択。無い場合は Guid.Empty のまま（未選択）
        if (_hasBooks)
            _selectedBookId = _books[0].Id;
    }

    private async ValueTask<bool> ApplyAsync()
    {
        if (TargetIds.Count == 0) return false;

        if (_mode == BulkPhrasebookMode.AddToExisting)
        {
            // 帳が無い or 未選択なら実行させない
            if (!_hasBooks || _selectedBookId == Guid.Empty)
                return false;

            var ok = await UiOperationRunner.WriteAsync(
                () => PhraseBookService.CreateAsync(_selectedBookId, TargetIds),
                message: AppMessages.MSG_I_PROGRESS_SAVE
            );
            if (!ok.IsSuccess) return false;

            if (OnApplied.HasDelegate) await OnApplied.InvokeAsync(true);
            return true;
        }

        // 新規作成モード（使う場合）
        var name = (_newBookName ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(name)) return false;

        var chained = await UiOperationRunner.WriteAsync(async () =>
        {
            var created = await PhraseBookService.CreateAsync(name);
            if (!created.IsSuccess) return ServiceResult.None.Error(created.Message);
            return await PhraseBookService.CreateAsync(created.Data, TargetIds);
        }, message: AppMessages.MSG_I_PROGRESS_SAVE);

        if (!chained.IsSuccess) return false;

        if (OnApplied.HasDelegate) await OnApplied.InvokeAsync(true);
        return true;
    }
}
