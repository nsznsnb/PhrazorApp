@using System.Globalization
@using CsvHelper
@using CsvHelper.Configuration
@using Microsoft.AspNetCore.Components.Forms
@inject ISnackbar Snackbar

<DialogBaseWrapper DialogAlertType="DialogAlertType.Info"
                   DialogTitle="CSV読込"
                   ExecuteButtonText="読込"
                   CancelButtonText="@ComDefine.LABEL_BUTTON_CANCEL"
                   ContentClass="py-5 my-1"
                   OnExecuteCallback="Submit"
                   ExecuteResult="true">

    <MudText Typo="Typo.subtitle1" Class="mb-2">CSVファイルを選択してください</MudText>

    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
        <MudFileUpload T="IBrowserFile"
                       FilesChanged="UploadFiles"
                       Accept=".csv"
                       MaximumFileCount="1"
                       Class="my-2">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled" Size="@ComDefine.SIZE_BUTTON" StartIcon="@Icons.Material.TwoTone.AttachFile">
                    @ComDefine.LABEL_BUTTON_CHOICE_FILE
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>

        <MudList T="string">
            @foreach (var file in _files)
            {
                <MudListItem @key="file">@file.Name</MudListItem>
            }
        </MudList>
    </MudStack>
</DialogBaseWrapper>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public EventCallback<List<PhraseModel>> OnUploadCompleted { get; set; }

    private IList<IBrowserFile> _files = new List<IBrowserFile>();

    private void UploadFiles(IBrowserFile file)
    {
        _files.Clear(); // 単一ファイルに制限する場合
        _files.Add(file);
    }

    private async Task Submit()
    {
        if (_files.Count == 0)
        {
            Snackbar.Add("CSVファイルを選択してください。", Severity.Warning);
            return;
        }

        try
        {
            var file = _files.First();
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 最大10MB
            using var reader = new StreamReader(stream);

            // CSV設定：ヘッダーなし
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                HasHeaderRecord = false,
                MissingFieldFound = null,      // CSVにないプロパティがあっても無視
                IgnoreBlankLines = true,
                TrimOptions = TrimOptions.Trim
            };
            using var csv = new CsvReader(reader, config);


            // 非同期で読み込む
            var records = new List<PhraseModel>();
            await foreach (var record in csv.GetRecordsAsync<PhraseModel>())
            {
                records.Add(record);
            }

            await OnUploadCompleted.InvokeAsync(records);

            Snackbar.Add("CSV読込が完了しました。", Severity.Success);
            MudDialog.Close(DialogResult.Ok(records));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"CSVの読み込みに失敗しました: {ex.Message}", Severity.Error);
        }
    }
}
