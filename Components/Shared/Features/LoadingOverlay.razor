@* LoadingOverlay.razor *@
@inject LoadingManager LoadingManager

@if (ShouldShow)
{
    <MudOverlay Visible="true"
                Absolute="@ResolvedAbsolute"
                LightBackground="true"
                ZIndex="@ResolvedZIndex">
        <MudPaper Elevation="12" Class="loading-panel">
            <MudStack Spacing="1" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.subtitle1">@LoadingManager.Message</MudText>

                @if (LoadingManager.Indeterminate)
                {
                    <MudProgressLinear Striped Rounded Indeterminate Class="mt-2" Style="width:220px;" />
                }
                else
                {
                    <MudProgressLinear Striped Rounded Value="@(LoadingManager.Value ?? 0)" Class="mt-2" Style="width:220px;" />
                }
            </MudStack>
        </MudPaper>
    </MudOverlay>
}
<style>
    .loading-panel {
        position: relative;
        padding: 14px 18px;
        border-radius: 14px;
        background: rgba(255,255,255,.92);
        backdrop-filter: blur(2px);
        max-width: 280px;
    }

    html.dark .loading-panel {
        background: rgba(0,0,0,.70);
    }
</style>

@code {
    [Parameter] public OverlayScope Mode { get; set; } = OverlayScope.BodyOnly;

    // 必要なら上書き可能（指定しなければ Mode から自動計算）
    [Parameter] public int? ZIndex { get; set; }
    [Parameter] public bool? LightBackground { get; set; }
    [Parameter] public bool? Absolute { get; set; }

    private bool ShouldShow =>
        LoadingManager.IsVisible && LoadingManager.Scope == Mode;

    private int ResolvedZIndex =>
        ZIndex ?? (Mode == OverlayScope.BodyOnly ? AppZIndex.ContentOverlay : AppZIndex.GlobalOverlay);


    private bool ResolvedAbsolute =>
        Absolute ?? (Mode == OverlayScope.BodyOnly); // Content=親内だけ覆う, Global=全画面

    protected override void OnInitialized()
        => LoadingManager.VisibilityChanged += OnChanged;

    private void OnChanged() => InvokeAsync(StateHasChanged);

    public void Dispose()
        => LoadingManager.VisibilityChanged -= OnChanged;
}