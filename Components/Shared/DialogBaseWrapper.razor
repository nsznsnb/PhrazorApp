@typeparam TDialogResult

<MudDialog Class="blur dialog-background responsive-dialog"
           TitleClass="blur dialog-background-title"
           ContentClass="@GetContentClass()"
           ActionsClass="dialog-background-surface">

    <!-- タイトル部 -->
    <TitleContent>
        <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
            @if (DialogAlertType == DialogAlertType.Error)
            {
                <MudIcon Icon="@Icons.Material.TwoTone.Error" Color="Color.Error" />
            }
            else if (DialogAlertType == DialogAlertType.Warning)
            {
                <MudIcon Icon="@Icons.Material.TwoTone.Warning" Color="Color.Warning" />
            }

            <MudText Typo="Typo.h6">@DialogTitle</MudText>
        </MudStack>
    </TitleContent>

    <!-- 本文部 -->
    <DialogContent>
        @ChildContent
    </DialogContent>

    <!-- アクション部 -->
    <DialogActions>
        @if (ShowExecuteButton)
        {
            <MudButton Variant="Variant.Filled"
                       Color="color"
                       OnClick="@OnExecuteInternal">
                @ExecuteButtonText
            </MudButton>
        }

        <MudButton Variant="Variant.Outlined"
                   OnClick="Cancel">
            @CancelButtonText
        </MudButton>
    </DialogActions>
</MudDialog>

<style>
    /*
        ============ ダイアログのlook & feel ===================
    */
    .blur {
        backdrop-filter: blur(10px);
    }

    .dialog-background {
        background-color: transparent;
    }

    .dialog-background-title {
        background: rgb(from var(--mud-palette-info-lighten) r g b / 40%);
        color: var(--mud-palette-white);
    }

    .dialog-background-surface {
        background: rgb(from var(--mud-palette-background) r g b / 90%);
    }



</style>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = default!;

    /// <summary>ダイアログのアラートタイプ</summary>
    [Parameter] public DialogAlertType DialogAlertType { get; set; } = DialogAlertType.Info;

    /// <summary>ダイアログのタイトルに表示されます</summary>
    [Parameter] public string DialogTitle { get; set; } = string.Empty;

    [Parameter] public string? ContentClass { get; set; }

    /// <summary>実行ボタンのラベル</summary>
    [Parameter] public string ExecuteButtonText { get; set; } = "OK";

    /// <summary>キャンセルボタンのラベル</summary>
    [Parameter] public string CancelButtonText { get; set; } = "キャンセル";

    /// <summary>実行ボタンを表示するか</summary>
    [Parameter] public bool ShowExecuteButton { get; set; } = true;

    /// <summary>Executeボタンクリック時の任意の処理</summary>
    [Parameter] public EventCallback OnExecuteCallback { get; set; }

    /// <summary>Execute結果を返す（任意）</summary>
    [Parameter] public TDialogResult? ExecuteResult { get; set; }

    /// <summary>中身のUIを差し込む場所</summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }


    /// <summary>タイトル左側のアイコン色と実行ボタンの色に使用されます</summary>
    private Color color => DialogAlertType switch {
        DialogAlertType.Info => Color.Primary,
        DialogAlertType.Warning => Color.Warning,
        DialogAlertType.Error => Color.Error,
        _ => Color.Primary
    };

    /// <summary>
    /// ダイアログコンテンツのクラスを取得する
    /// </summary>
    /// <returns></returns>
    private string GetContentClass()
    {
        return string.IsNullOrWhiteSpace(ContentClass)
            ? "dialog-background-surface py-10 my-1"
            : $"dialog-background-surface {ContentClass}";
    }


    private async Task OnExecuteInternal()
    {
        if (OnExecuteCallback.HasDelegate)
            await OnExecuteCallback.InvokeAsync();

        MudDialog.Close(DialogResult.Ok(ExecuteResult));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
