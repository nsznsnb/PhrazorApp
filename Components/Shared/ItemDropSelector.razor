
<MudDropContainer T="DropItemModel"
                  Items="Items"
                  ItemsSelector="@((item, zone) => item.DropTarget == ParseDropItemType(zone) )"
                  ItemDropped="HandleItemDropped"
                  Class="d-flex flex-grow-1">

    <ChildContent>
        <MudGrid Spacing="1">
            <MudItem xs="12">
                <MudListSubheader>@UnassignedLabel</MudListSubheader>
                <MudDropZone T="DropItemModel"
                             Identifier="@DropItemType.UnAssigned.ToString()"
                             Class="rounded mud-background-gray pa-3"
                             Style="@GetZoneStyle(DropItemType.UnAssigned)" />
            </MudItem>

            <MudItem xs="12">
                <MudListSubheader>@TargetLabel</MudListSubheader>
                <MudDropZone T="DropItemModel"
                             Identifier="@DropItemType.Target.ToString()"
                             Class="rounded mud-background-gray pa-3"
                             Style="@GetZoneStyle(DropItemType.Target)" />
            </MudItem>
        </MudGrid>
    </ChildContent>

    <ItemRenderer Context="context">
        @if (ItemTemplate != null)
        {
            @ItemTemplate(context)
        }
        else
        {
            <MudChip T="string" Color="Color.Default">@context.Name</MudChip>
        }
    </ItemRenderer>
</MudDropContainer>

@code {

    /// <summary>全アイテム（DropTargetを含む）</summary>
    [Parameter]
    public List<DropItemModel> Items { get; set; } = new();

    /// <summary>選択中アイテム（TargetZoneにドロップされたもの）
    [Parameter]
    public List<DropItemModel> SelectedItems { get; set; } = new();

    /// <summary>選択中アイテムが変更されたとき親に通知</summary>
    [Parameter]
    public EventCallback<List<DropItemModel>> SelectedItemsChanged { get; set; }

    /// <summary>最大選択数（TargetZone）</summary>
    [Parameter]
    public int MaxSelection { get; set; } = 3;

    [Parameter]
    public string UnassignedLabel { get; set; } = "未分類";

    [Parameter]
    public string TargetLabel { get; set; } = "選択中";

    [Parameter]
    public RenderFragment<DropItemModel>? ItemTemplate { get; set; }

    [Parameter]
    public string? Width { get; set; } = "100%";

    [Parameter]
    public string? Height { get; set; }

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    private string ContainerStyle => $"width:{Width};";

    private string GetZoneStyle(DropItemType zone)
    {
        var baseStyle = "min-width:300px;";
        var heightValue = Height ?? "130px";

        return zone == DropItemType.Target
            ? $"{baseStyle} min-height:{heightValue}; max-height:{heightValue}; overflow-y:auto;"
            : $"{baseStyle} max-height:{heightValue};";
    }

    /// <summary>ドロップ操作時の処理</summary>
    private async Task HandleItemDropped(MudItemDropInfo<DropItemModel> dropInfo)
    {
        var targetZone = DropItemType.Target;
        var unassignedZone = DropItemType.UnAssigned;

        var currentZone = ParseDropItemType(dropInfo.DropzoneIdentifier);

        var count = Items.Count(x => x.DropTarget == targetZone);

        if (currentZone == targetZone && count >= MaxSelection)
        {
            dropInfo.Item!.DropTarget = unassignedZone;
            Snackbar.Add($"最大選択数 {MaxSelection} を超えています。", Severity.Warning);
            return;
        }

        dropInfo.Item!.DropTarget = currentZone;

        var selected = Items.Where(x => x.DropTarget == targetZone).ToList();
        SelectedItems.Clear();
        SelectedItems.AddRange(selected);

        if (SelectedItemsChanged.HasDelegate)
        {
            await SelectedItemsChanged.InvokeAsync(SelectedItems);
        }
    }

    private static DropItemType ParseDropItemType(string zone)
    {
        // 文字列から DropItemType に変換
        return Enum.TryParse<DropItemType>(zone, out var result)
            ? result
            : DropItemType.UnAssigned;
    }
}
