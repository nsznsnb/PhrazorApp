<MudDropContainer T="DropItemModel"
                   Items="Items"
                   ItemsSelector="@( (item, zone) => item.DropTarget == zone )"
                   ItemDropped="HandleItemDropped"
                   Class="d-flex flex-grow-1">

    <ChildContent>
        <MudGrid Spacing="1">
            <MudItem xs="12">
                <MudListSubheader Class="mt-2 pb-2">@UnassignedLabel</MudListSubheader>
                <MudDropZone T="DropItemModel"
                             Identifier="@UnassignedZone"
                             Class="rounded mud-background-gray pa-3 ma-0 d-flex flex-row flex-wrap"
                             Style="overflow-y:auto;min-height:50px;max-height:130px;" />
            </MudItem>

            <MudItem xs="12">
                <MudListSubheader Class="mt-0 pb-2">@TargetLabel</MudListSubheader>
                <MudDropZone T="DropItemModel"
                             Identifier="@TargetZone"
                             Class="rounded mud-background-gray pa-3 ma-0 d-flex flex-row flex-wrap"
                             Style="overflow-y:auto;min-height:50px;max-height:130px;" />
            </MudItem>
        </MudGrid>
    </ChildContent>

    <ItemRenderer Context="context">
        @if (ItemTemplate != null)
        {
            @ItemTemplate(context)
        }
        else
        {
            <MudChip T="string" Color="Color.Default">@context.Name</MudChip>
        }
    </ItemRenderer>
</MudDropContainer>

@code {
    [Parameter]
    public List<DropItemModel> Items { get; set; } = new();

    [Parameter]
    public int MaxSelection { get; set; } = 3;

    [Parameter]
    public string UnassignedZone { get; set; } = "Unassigned";

    [Parameter]
    public string TargetZone { get; set; } = "Target";

    [Parameter]
    public string UnassignedLabel { get; set; } = "未分類";

    [Parameter]
    public string TargetLabel { get; set; } = "選択中";

    [Parameter]
    public EventCallback<MudItemDropInfo<DropItemModel>> OnItemDropped { get; set; }

    [Parameter]
    public RenderFragment<DropItemModel>? ItemTemplate { get; set; }

    [Parameter]
    public string? Width { get; set; } = "100%"; // 例: "400px"、"80%"など

    [Parameter]
    public string? Height { get; set; } = null;  // 例: "150px"。nullなら既存のmax-heightなどを使う

    private string ContainerStyle => $"width:{Width};";

    private string GetZoneStyle(string zone)
    {
        var baseStyle = "min-width:300px; ";

        if (zone == UnassignedZone)
        {
            // 高さはパラメータ指定があれば優先、なければmax-height:130pxを維持
            var heightValue = Height ?? "130px";
            return $"{baseStyle} max-height:{heightValue};";
        }
        else if (zone == TargetZone)
        {
            var heightValue = Height ?? "130px";
            return $"min-width:300px; min-height:{heightValue}; max-height:{heightValue}; overflow-y:auto;";
        }
        return baseStyle;
    }

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    private async Task HandleItemDropped(MudItemDropInfo<DropItemModel> dropInfo)
    {
        var count = Items.Count(x => x.DropTarget == TargetZone);

        if (dropInfo.DropzoneIdentifier == TargetZone && count >= MaxSelection)
        {
            dropInfo.Item!.DropTarget = UnassignedZone;
            Snackbar.Add($"最大選択数 {MaxSelection} を超えています。", Severity.Warning);
            return;
        }

        dropInfo.Item!.DropTarget = dropInfo.DropzoneIdentifier;

        if (OnItemDropped.HasDelegate)
        {
            await OnItemDropped.InvokeAsync(dropInfo);
        }
    }
}