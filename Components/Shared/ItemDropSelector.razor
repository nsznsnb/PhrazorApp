@inject IGenreService GenreService
@inject ISnackbar Snackbar

<MudPaper Class="pa-2" Outlined="true" Style="width: 100%;">
    <MudDropContainer T="DropItemModel"
                      @ref="_dropContainer"
                      Items="_items"
                      ItemsSelector="@((item, zone) => item.DropTarget == ParseDropItemType(zone))"
                      ItemDropped="HandleItemDropped"
                      Class="d-flex flex-grow-1">

        <ChildContent>
            <MudGrid Spacing="1">
                <MudItem xs="12">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudListSubheader>@UnassignedLabel</MudListSubheader>
                        <MudButton Variant="Variant.Outlined" Size="@ComDefine.SIZE_BUTTON" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="OnAddButtonClicked">
                            @ComDefine.LABEL_BUTTON_CREATE
                        </MudButton>
                    </MudStack>
                    <MudDropZone T="DropItemModel"
                                 Identifier="@DropItemType.UnAssigned.ToString()"
                                 Class="rounded mud-background-gray pa-3 d-flex flex-row flex-wrap"
                                 Style="@GetZoneStyle(DropItemType.UnAssigned)" />
                </MudItem>

                <MudItem xs="12">
                    <MudListSubheader>@TargetLabel</MudListSubheader>
                    <MudDropZone T="DropItemModel"
                                 Identifier="@DropItemType.Target.ToString()"
                                 Class="rounded mud-background-gray pa-3 d-flex flex-row flex-wrap"
                                 Style="@GetZoneStyle(DropItemType.Target)" />
                </MudItem>
            </MudGrid>
        </ChildContent>

        <ItemRenderer Context="context">
            @if (ItemTemplate != null)
            {
                @ItemTemplate(context)
            }
            else
            {
                <MudChip T="string" Color="Color.Default">@context.Name</MudChip>
            }
        </ItemRenderer>
    </MudDropContainer>
</MudPaper>

@code {
    private List<DropItemModel> _items = new();
    private MudDropContainer<DropItemModel>? _dropContainer;

    [Parameter]
    public List<DropItemModel> SelectedItems { get; set; } = new();

    [Parameter]
    public EventCallback<List<DropItemModel>> SelectedItemsChanged { get; set; }

    [Parameter]
    public EventCallback OnAddGenreClicked { get; set; }

    [Parameter]
    public int MaxSelection { get; set; } = 3;

    [Parameter]
    public string UnassignedLabel { get; set; } = "未分類";

    [Parameter]
    public string TargetLabel { get; set; } = "選択中";

    [Parameter]
    public RenderFragment<DropItemModel>? ItemTemplate { get; set; }

    [Parameter]
    public string? Width { get; set; } = "100%";

    [Parameter]
    public string? Height { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var allItems = await GenreService.GetGenreDropItemModelListAsync();

        foreach (var item in allItems)
        {
            item.DropTarget = SelectedItems.Any(sel => sel.Key1 == item.Key1 && sel.Key2 == item.Key2)
                ? DropItemType.Target
                : DropItemType.UnAssigned;
        }

        _items = allItems;

        await Task.Delay(10);
        _dropContainer?.Refresh();
    }

    private async Task HandleItemDropped(MudItemDropInfo<DropItemModel> dropInfo)
    {
        var currentZone = ParseDropItemType(dropInfo.DropzoneIdentifier);

        if (currentZone == DropItemType.Target &&
            _items.Count(x => x.DropTarget == DropItemType.Target) >= MaxSelection)
        {
            dropInfo.Item!.DropTarget = DropItemType.UnAssigned;
            Snackbar.Add($"最大選択数 {MaxSelection} を超えています。", Severity.Warning);
            return;
        }

        dropInfo.Item!.DropTarget = currentZone;

        SelectedItems = _items.Where(x => x.DropTarget == DropItemType.Target).ToList();

        if (SelectedItemsChanged.HasDelegate)
            await SelectedItemsChanged.InvokeAsync(SelectedItems);

        StateHasChanged();
    }

    private static DropItemType ParseDropItemType(string zone)
    {
        return Enum.TryParse<DropItemType>(zone, out var result)
            ? result
            : DropItemType.UnAssigned;
    }

    private string GetZoneStyle(DropItemType zone)
    {
        var baseStyle = "min-width:250px;";
        var heightValue = Height ?? "130px";

        return zone == DropItemType.UnAssigned
            ? $"{baseStyle} min-height:{heightValue}; max-height:{heightValue}; overflow-y:auto;"
            : $"{baseStyle} min-height:70px; max-height:{heightValue};";
    }

    private async Task OnAddButtonClicked()
    {
        if (OnAddGenreClicked.HasDelegate)
            await OnAddGenreClicked.InvokeAsync();
        StateHasChanged();

    }
}
