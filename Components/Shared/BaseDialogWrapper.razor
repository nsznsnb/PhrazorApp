@typeparam TDialogResult

<MudDialog Class="blur dialog-background responsive-dialog"
           TitleClass="blur dialog-background-title"
           ContentClass="dialog-background-surface py-5 mt-1 mb-1"
           ActionsClass="dialog-background-surface">

    <!-- タイトル部 -->
    <TitleContent>
        <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
            @if (DialogColor == Color.Error)
            {
                <MudIcon Icon="@Icons.Material.TwoTone.Error" Color="DialogColor" />
            }
            else if (DialogColor == Color.Warning)
            {
                <MudIcon Icon="@Icons.Material.TwoTone.Warning" Color="DialogColor" />
            }

            <MudText Typo="Typo.h6">@DialogTitle</MudText>
        </MudStack>
    </TitleContent>

    <!-- 本文部 -->
    <DialogContent>
        @ChildContent
    </DialogContent>

    <!-- アクション部 -->
    <DialogActions>
        @if (ShowExecuteButton)
        {
            <MudButton Variant="Variant.Filled"
                       Color="@DialogColor"
                       OnClick="@OnExecuteInternal">
                @ExecuteButtonText
            </MudButton>
        }

        <MudButton Variant="Variant.Outlined"
                   OnClick="Cancel">
            @CancelButtonText
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = default!;

    /// <summary>タイトル左側のアイコン色と実行ボタンの色に使用されます</summary>
    [Parameter] public Color DialogColor { get; set; } = Color.Info;

    /// <summary>ダイアログのタイトルに表示されます</summary>
    [Parameter] public string DialogTitle { get; set; } = string.Empty;

    /// <summary>実行ボタンのラベル</summary>
    [Parameter] public string ExecuteButtonText { get; set; } = "OK";

    /// <summary>キャンセルボタンのラベル</summary>
    [Parameter] public string CancelButtonText { get; set; } = "キャンセル";

    /// <summary>実行ボタンを表示するか</summary>
    [Parameter] public bool ShowExecuteButton { get; set; } = true;

    /// <summary>Executeボタンクリック時の任意の処理</summary>
    [Parameter] public EventCallback OnExecuteCallback { get; set; }

    /// <summary>Execute結果を返す（任意）</summary>
    [Parameter] public TDialogResult? ExecuteResult { get; set; }

    /// <summary>中身のUIを差し込む場所</summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private async Task OnExecuteInternal()
    {
        if (OnExecuteCallback.HasDelegate)
            await OnExecuteCallback.InvokeAsync();

        MudDialog.Close(DialogResult.Ok(ExecuteResult));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
